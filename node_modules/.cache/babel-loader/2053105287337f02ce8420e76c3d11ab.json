{"ast":null,"code":"import createDataContext from './createDataContext';\nimport { azureProvider, getAccessToken, scopeRequestConfig, isInteractionNeeded } from '../utils/security.util';\nconst TYPES = {\n  ADD_ERROR: 'auth/add_error',\n  LOGIN: 'auth/login',\n  SIGN_OUT: 'auth/signOut',\n  CLEAR_ERROR: 'auth/clearError',\n  SET_USER: 'auth/setUser'\n};\nconst initialState = {\n  isAuthenticated: false,\n  token: null,\n  errorMessage: '',\n  username: null\n};\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case TYPES.ADD_ERROR:\n      return { ...state,\n        errorMessage: action.payload\n      };\n\n    case TYPES.LOGIN:\n      return { ...state,\n        isAuthenticated: true,\n        errorMessage: '',\n        token: action.payload\n      };\n\n    case TYPES.CLEAR_ERROR:\n      return { ...state,\n        errorMessage: ''\n      };\n\n    case TYPES.SIGN_OUT:\n      return initialState;\n\n    case TYPES.SET_USER:\n      return { ...state,\n        username: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst signIn = dispatch => async () => {\n  const allAccounts = await azureProvider.getAllAccounts();\n\n  try {\n    if ((allAccounts === null || allAccounts === void 0 ? void 0 : allAccounts.length) <= 0) throw new Error('login_required');\n    const silentResult = await azureProvider.acquireTokenSilent({\n      scopeRequestConfig,\n      account: allAccounts[0]\n    });\n    dispatch({\n      type: TYPES.LOGIN,\n      payload: silentResult.accessToken\n    });\n  } catch (err) {\n    console.log(err);\n\n    if (isInteractionNeeded(err)) {\n      try {\n        console.log('trying');\n        const interactiveResult = await azureProvider.loginRedirect();\n        dispatch({\n          type: TYPES.LOGIN,\n          payload: interactiveResult.accessToken\n        });\n      } catch (e) {\n        dispatch({\n          type: TYPES.ADD_ERROR,\n          payload: err\n        });\n      }\n    }\n  }\n};\n\nconst getProfile = dispatch => async () => {// const accounts = azureProvider.getAllAccounts();\n  //\n  // if (accounts.length) {\n  //   dispatch({\n  //     type: TYPES.SET_USER,\n  //     payload: accounts[0].name\n  //   })\n  // }\n};\n\nconst signOut = dispatch => async () => {\n  await azureProvider.logout();\n  dispatch({\n    type: TYPES.SIGN_OUT\n  });\n};\n\nexport const {\n  Provider,\n  Context\n} = createDataContext(authReducer, {\n  signIn,\n  getProfile,\n  signOut\n}, initialState);","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/context/AuthContext.js"],"names":["createDataContext","azureProvider","getAccessToken","scopeRequestConfig","isInteractionNeeded","TYPES","ADD_ERROR","LOGIN","SIGN_OUT","CLEAR_ERROR","SET_USER","initialState","isAuthenticated","token","errorMessage","username","authReducer","state","action","type","payload","signIn","dispatch","allAccounts","getAllAccounts","length","Error","silentResult","acquireTokenSilent","account","accessToken","err","console","log","interactiveResult","loginRedirect","e","getProfile","signOut","logout","Provider","Context"],"mappings":"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","sourcesContent":["import createDataContext from './createDataContext';\nimport { azureProvider, getAccessToken, scopeRequestConfig, isInteractionNeeded } from '../utils/security.util';\n\nconst TYPES = {\n  ADD_ERROR: 'auth/add_error',\n  LOGIN: 'auth/login',\n  SIGN_OUT: 'auth/signOut',\n  CLEAR_ERROR: 'auth/clearError',\n  SET_USER: 'auth/setUser'\n};\n\nconst initialState = {\n  isAuthenticated: false,\n  token: null,\n  errorMessage: '',\n  username: null\n}\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case TYPES.ADD_ERROR:\n      return {...state, errorMessage: action.payload};\n    case TYPES.LOGIN:\n      return {...state, isAuthenticated: true, errorMessage: '', token: action.payload};\n    case TYPES.CLEAR_ERROR:\n      return {...state, errorMessage: ''};\n    case TYPES.SIGN_OUT:\n      return initialState;\n    case TYPES.SET_USER:\n      return {...state, username: action.payload}\n    default:\n      return state;\n  }\n};\n\nconst signIn = (dispatch) => async () => {\n  const allAccounts = await azureProvider.getAllAccounts();\n  try {\n    if (allAccounts?.length <= 0) throw new Error('login_required');\n    const silentResult = await azureProvider.acquireTokenSilent({\n      scopeRequestConfig,\n      account: allAccounts[0]\n    });\n\n    dispatch({\n      type: TYPES.LOGIN,\n      payload: silentResult.accessToken\n    });\n  } catch (err) {\n\n    console.log(err);\n    if (isInteractionNeeded(err)) {\n      try {\n\n        console.log('trying');\n        const interactiveResult = await azureProvider.loginRedirect();\n        dispatch({\n          type: TYPES.LOGIN,\n          payload: interactiveResult.accessToken\n        });\n      } catch (e) {\n        dispatch({\n          type: TYPES.ADD_ERROR,\n          payload: err\n        });\n      }\n    }\n  }\n};\n\nconst getProfile = (dispatch) => async () => {\n  // const accounts = azureProvider.getAllAccounts();\n  //\n  // if (accounts.length) {\n  //   dispatch({\n  //     type: TYPES.SET_USER,\n  //     payload: accounts[0].name\n  //   })\n  // }\n};\n\nconst signOut = (dispatch) => async () => {\n  await azureProvider.logout()\n\n  dispatch({\n    type: TYPES.SIGN_OUT\n  })\n}\n\n\nexport const {Provider, Context} = createDataContext(\n  authReducer,\n  {signIn, getProfile, signOut},\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}
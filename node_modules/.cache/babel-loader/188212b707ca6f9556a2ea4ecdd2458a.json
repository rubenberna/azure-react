{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext, useState, useEffect } from 'react';\nimport { Context as AuthContext } from '../context/AuthContext';\nimport { PERMISSIONS } from '../consts/permissions.consts';\nexport const useUserHasPermission = permissionToCheck => {\n  _s();\n\n  const {\n    state: {\n      role\n    }\n  } = useContext(AuthContext);\n  const [hasPermission, setHasPermission] = useState(false);\n  const permissionsArray = Object.values(PERMISSIONS);\n  useEffect(() => {\n    if (role) {\n      console.log(role); // const userRoleIndex = permissionsArray.findIndex(role);\n      // const permissionToCheckIndex = permissionsArray.findIndex(permissionToCheck);\n      // setHasPermission(userRoleIndex >= permissionToCheckIndex)\n    }\n  }, [role]);\n  return hasPermission;\n};\n\n_s(useUserHasPermission, \"1rDuSn+IwgGi52pFhh+DcbHJIP8=\");","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/utils/useUserHasPermission.util.js"],"names":["useContext","useState","useEffect","Context","AuthContext","PERMISSIONS","useUserHasPermission","permissionToCheck","state","role","hasPermission","setHasPermission","permissionsArray","Object","values","console","log"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,SAASC,OAAO,IAAIC,WAApB,QAAuC,wBAAvC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AAEA,OAAO,MAAMC,oBAAoB,GAAIC,iBAAD,IAAuB;AAAA;;AACzD,QAAM;AAACC,IAAAA,KAAK,EAAE;AAACC,MAAAA;AAAD;AAAR,MAAkBT,UAAU,CAACI,WAAD,CAAlC;AACA,QAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,KAAD,CAAlD;AAEA,QAAMW,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAcT,WAAd,CAAzB;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,IAAJ,EAAU;AACRM,MAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ,EADQ,CAER;AACA;AACA;AACD;AACF,GAPQ,EAON,CAACA,IAAD,CAPM,CAAT;AASA,SAAOC,aAAP;AACD,CAhBM;;GAAMJ,oB","sourcesContent":["import { useContext, useState, useEffect } from 'react';\nimport { Context as AuthContext } from '../context/AuthContext';\nimport { PERMISSIONS } from '../consts/permissions.consts';\n\nexport const useUserHasPermission = (permissionToCheck) => {\n  const {state: {role}} = useContext(AuthContext);\n  const [hasPermission, setHasPermission] = useState(false);\n\n  const permissionsArray = Object.values(PERMISSIONS);\n\n  useEffect(() => {\n    if (role) {\n      console.log(role);\n      // const userRoleIndex = permissionsArray.findIndex(role);\n      // const permissionToCheckIndex = permissionsArray.findIndex(permissionToCheck);\n      // setHasPermission(userRoleIndex >= permissionToCheckIndex)\n    }\n  }, [role])\n\n  return hasPermission;\n};"]},"metadata":{},"sourceType":"module"}
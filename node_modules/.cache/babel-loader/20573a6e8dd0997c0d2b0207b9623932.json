{"ast":null,"code":"import { PublicClientApplication } from '@azure/msal-browser';\nimport { UserAgentApplication } from 'msal';\nimport { MsalAuthProvider, LoginType } from 'react-aad-msal';\nimport { APP_ID, REDIRECT_URI, SCOPES } from '../config/environment';\nconst MSAL_CONFIG = {\n  auth: {\n    clientId: APP_ID,\n    redirectUri: REDIRECT_URI\n  }\n}; // Msal Configurations\n\nconst config = {\n  auth: {\n    authority: 'https://login.microsoftonline.com/common',\n    clientId: '<YOUR APPLICATION ID>',\n    redirectUri: '<OPTIONAL REDIRECT URI>'\n  },\n  cache: {\n    cacheLocation: \"localStorage\",\n    storeAuthStateInCookie: true\n  }\n}; // Authentication Parameters\n\nconst authenticationParameters = {\n  scopes: ['<property (i.e. user.read)>', 'https://<your-tenant-name>.onmicrosoft.com/<your-application-name>/<scope (i.e. demo.read)>']\n}; // Options\n\nconst options = {\n  loginType: LoginType.Popup,\n  tokenRefreshUri: window.location.origin + '/auth.html'\n};\nexport const authProvider = new MsalAuthProvider(config, authenticationParameters, options);\nexport const azureProvider = new PublicClientApplication(MSAL_CONFIG);\nexport const scopeRequestConfig = {\n  scopes: SCOPES.split(',')\n};\nexport const getAccessToken = async () => {\n  const allAccounts = azureProvider.getAllAccounts();\n\n  try {\n    if ((allAccounts === null || allAccounts === void 0 ? void 0 : allAccounts.length) <= 0) throw new Error('login_required');\n    const silentResult = await azureProvider.acquireTokenSilent({\n      scopeRequestConfig,\n      account: allAccounts[0]\n    });\n    return silentResult.accessToken;\n  } catch (err) {\n    if (isInteractionNeeded(err)) {\n      const interactiveResult = await azureProvider.acquireTokenPopup({\n        scopeRequestConfig\n      });\n      return interactiveResult.accessToken;\n    } else {\n      throw err;\n    }\n  }\n};\n\nconst isInteractionNeeded = error => {\n  if (!error.message || error.message.length <= 0) {\n    return false;\n  }\n\n  return error.message.indexOf('consent_required') > -1 || error.message.indexOf('interaction_required') > -1 || error.message.indexOf('login_required') > -1 || error.message.indexOf('no_account_in_silent_request') > -1;\n};\n\nexport const getUserProfile = async () => {\n  try {\n    const accessToken = await getAccessToken(scopeRequestConfig);\n\n    if (accessToken) {\n      return {\n        isAuthenticated: true,\n        user: {},\n        error: {\n          message: \"Access token:\",\n          debug: accessToken\n        }\n      };\n    }\n  } catch (err) {\n    return {\n      isAuthenticated: false,\n      user: {},\n      error: normalizeError(err)\n    };\n  }\n};\n\nconst normalizeError = error => {\n  let normalizedError = {};\n\n  if (typeof error === 'string') {\n    const errParts = error.split('|');\n    normalizedError = errParts.length > 1 ? {\n      message: errParts[1],\n      debug: errParts[0]\n    } : {\n      message: error\n    };\n  } else {\n    normalizedError = {\n      message: error.message,\n      debug: JSON.stringify(error)\n    };\n  }\n\n  return normalizedError;\n};","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/utils/security.util.js"],"names":["PublicClientApplication","UserAgentApplication","MsalAuthProvider","LoginType","APP_ID","REDIRECT_URI","SCOPES","MSAL_CONFIG","auth","clientId","redirectUri","config","authority","cache","cacheLocation","storeAuthStateInCookie","authenticationParameters","scopes","options","loginType","Popup","tokenRefreshUri","window","location","origin","authProvider","azureProvider","scopeRequestConfig","split","getAccessToken","allAccounts","getAllAccounts","length","Error","silentResult","acquireTokenSilent","account","accessToken","err","isInteractionNeeded","interactiveResult","acquireTokenPopup","error","message","indexOf","getUserProfile","isAuthenticated","user","debug","normalizeError","normalizedError","errParts","JSON","stringify"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,qBAAxC;AACA,SAASC,oBAAT,QAAqC,MAArC;AACA,SAASC,gBAAT,EAA2BC,SAA3B,QAA4C,gBAA5C;AACA,SAASC,MAAT,EAAiBC,YAAjB,EAA+BC,MAA/B,QAA6C,uBAA7C;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAEL,MADN;AAEJM,IAAAA,WAAW,EAAEL;AAFT;AADY,CAApB,C,CAOA;;AACA,MAAMM,MAAM,GAAG;AACbH,EAAAA,IAAI,EAAE;AACJI,IAAAA,SAAS,EAAE,0CADP;AAEJH,IAAAA,QAAQ,EAAE,uBAFN;AAGJC,IAAAA,WAAW,EAAE;AAHT,GADO;AAMbG,EAAAA,KAAK,EAAE;AACLC,IAAAA,aAAa,EAAE,cADV;AAELC,IAAAA,sBAAsB,EAAE;AAFnB;AANM,CAAf,C,CAYA;;AACA,MAAMC,wBAAwB,GAAG;AAC/BC,EAAAA,MAAM,EAAE,CACN,6BADM,EAEN,6FAFM;AADuB,CAAjC,C,CAOA;;AACA,MAAMC,OAAO,GAAG;AACdC,EAAAA,SAAS,EAAEhB,SAAS,CAACiB,KADP;AAEdC,EAAAA,eAAe,EAAEC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAAyB;AAF5B,CAAhB;AAKA,OAAO,MAAMC,YAAY,GAAG,IAAIvB,gBAAJ,CAAqBS,MAArB,EAA6BK,wBAA7B,EAAuDE,OAAvD,CAArB;AAEP,OAAO,MAAMQ,aAAa,GAAG,IAAI1B,uBAAJ,CAA4BO,WAA5B,CAAtB;AACP,OAAO,MAAMoB,kBAAkB,GAAG;AAChCV,EAAAA,MAAM,EAAEX,MAAM,CAACsB,KAAP,CAAa,GAAb;AADwB,CAA3B;AAIP,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,QAAMC,WAAW,GAAGJ,aAAa,CAACK,cAAd,EAApB;;AAEA,MAAI;AACF,QAAI,CAAAD,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEE,MAAb,KAAuB,CAA3B,EAA8B,MAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AAC9B,UAAMC,YAAY,GAAG,MAAMR,aAAa,CAACS,kBAAd,CAAiC;AAC1DR,MAAAA,kBAD0D;AAE1DS,MAAAA,OAAO,EAAEN,WAAW,CAAC,CAAD;AAFsC,KAAjC,CAA3B;AAKA,WAAOI,YAAY,CAACG,WAApB;AACD,GARD,CAQE,OAAOC,GAAP,EAAY;AACZ,QAAIC,mBAAmB,CAACD,GAAD,CAAvB,EAA8B;AAC5B,YAAME,iBAAiB,GAAG,MAAMd,aAAa,CAACe,iBAAd,CAAgC;AAC9Dd,QAAAA;AAD8D,OAAhC,CAAhC;AAIA,aAAOa,iBAAiB,CAACH,WAAzB;AACD,KAND,MAMO;AACL,YAAMC,GAAN;AACD;AACF;AACF,CAtBM;;AAwBP,MAAMC,mBAAmB,GAAIG,KAAD,IAAW;AACrC,MAAI,CAACA,KAAK,CAACC,OAAP,IAAkBD,KAAK,CAACC,OAAN,CAAcX,MAAd,IAAwB,CAA9C,EAAiD;AAC/C,WAAO,KAAP;AACD;;AAED,SACEU,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsB,kBAAtB,IAA4C,CAAC,CAA7C,IACAF,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsB,sBAAtB,IAAgD,CAAC,CADjD,IAEAF,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsB,gBAAtB,IAA0C,CAAC,CAF3C,IAGAF,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsB,8BAAtB,IAAwD,CAAC,CAJ3D;AAMD,CAXD;;AAaA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,MAAI;AACF,UAAMR,WAAW,GAAG,MAAMR,cAAc,CAACF,kBAAD,CAAxC;;AACA,QAAIU,WAAJ,EAAiB;AACf,aAAO;AACLS,QAAAA,eAAe,EAAE,IADZ;AAELC,QAAAA,IAAI,EAAE,EAFD;AAGLL,QAAAA,KAAK,EAAE;AAACC,UAAAA,OAAO,EAAE,eAAV;AAA2BK,UAAAA,KAAK,EAAEX;AAAlC;AAHF,OAAP;AAKD;AACF,GATD,CASE,OAAOC,GAAP,EAAY;AACZ,WAAO;AACLQ,MAAAA,eAAe,EAAE,KADZ;AAELC,MAAAA,IAAI,EAAE,EAFD;AAGLL,MAAAA,KAAK,EAAEO,cAAc,CAACX,GAAD;AAHhB,KAAP;AAKD;AACF,CAjBM;;AAmBP,MAAMW,cAAc,GAAIP,KAAD,IAAW;AAChC,MAAIQ,eAAe,GAAG,EAAtB;;AAEA,MAAI,OAAQR,KAAR,KAAmB,QAAvB,EAAiC;AAC/B,UAAMS,QAAQ,GAAGT,KAAK,CAACd,KAAN,CAAY,GAAZ,CAAjB;AACAsB,IAAAA,eAAe,GAAGC,QAAQ,CAACnB,MAAT,GAAkB,CAAlB,GAChB;AAACW,MAAAA,OAAO,EAAEQ,QAAQ,CAAC,CAAD,CAAlB;AAAuBH,MAAAA,KAAK,EAAEG,QAAQ,CAAC,CAAD;AAAtC,KADgB,GAEhB;AAACR,MAAAA,OAAO,EAAED;AAAV,KAFF;AAGD,GALD,MAKO;AACLQ,IAAAA,eAAe,GAAG;AAChBP,MAAAA,OAAO,EAAED,KAAK,CAACC,OADC;AAEhBK,MAAAA,KAAK,EAAEI,IAAI,CAACC,SAAL,CAAeX,KAAf;AAFS,KAAlB;AAID;;AACD,SAAOQ,eAAP;AACD,CAfD","sourcesContent":["import { PublicClientApplication } from '@azure/msal-browser';\nimport { UserAgentApplication } from 'msal'\nimport { MsalAuthProvider, LoginType } from 'react-aad-msal';\nimport { APP_ID, REDIRECT_URI, SCOPES } from '../config/environment';\n\nconst MSAL_CONFIG = {\n  auth: {\n    clientId: APP_ID,\n    redirectUri: REDIRECT_URI,\n  }\n};\n\n// Msal Configurations\nconst config = {\n  auth: {\n    authority: 'https://login.microsoftonline.com/common',\n    clientId: '<YOUR APPLICATION ID>',\n    redirectUri: '<OPTIONAL REDIRECT URI>'\n  },\n  cache: {\n    cacheLocation: \"localStorage\",\n    storeAuthStateInCookie: true\n  }\n};\n\n// Authentication Parameters\nconst authenticationParameters = {\n  scopes: [\n    '<property (i.e. user.read)>',\n    'https://<your-tenant-name>.onmicrosoft.com/<your-application-name>/<scope (i.e. demo.read)>'\n  ]\n}\n\n// Options\nconst options = {\n  loginType: LoginType.Popup,\n  tokenRefreshUri: window.location.origin + '/auth.html'\n}\n\nexport const authProvider = new MsalAuthProvider(config, authenticationParameters, options)\n\nexport const azureProvider = new PublicClientApplication(MSAL_CONFIG);\nexport const scopeRequestConfig = {\n  scopes: SCOPES.split(',')\n}\n\nexport const getAccessToken = async () => {\n  const allAccounts = azureProvider.getAllAccounts();\n\n  try {\n    if (allAccounts?.length <= 0) throw new Error('login_required');\n    const silentResult = await azureProvider.acquireTokenSilent({\n      scopeRequestConfig,\n      account: allAccounts[0]\n    });\n\n    return silentResult.accessToken;\n  } catch (err) {\n    if (isInteractionNeeded(err)) {\n      const interactiveResult = await azureProvider.acquireTokenPopup({\n        scopeRequestConfig\n      });\n\n      return interactiveResult.accessToken;\n    } else {\n      throw err;\n    }\n  }\n};\n\nconst isInteractionNeeded = (error) => {\n  if (!error.message || error.message.length <= 0) {\n    return false;\n  }\n\n  return (\n    error.message.indexOf('consent_required') > -1 ||\n    error.message.indexOf('interaction_required') > -1 ||\n    error.message.indexOf('login_required') > -1 ||\n    error.message.indexOf('no_account_in_silent_request') > -1\n  );\n};\n\nexport const getUserProfile = async () => {\n  try {\n    const accessToken = await getAccessToken(scopeRequestConfig);\n    if (accessToken) {\n      return {\n        isAuthenticated: true,\n        user: {},\n        error: {message: \"Access token:\", debug: accessToken}\n      };\n    }\n  } catch (err) {\n    return {\n      isAuthenticated: false,\n      user: {},\n      error: normalizeError(err)\n    };\n  }\n};\n\nconst normalizeError = (error) => {\n  let normalizedError = {};\n\n  if (typeof (error) === 'string') {\n    const errParts = error.split('|');\n    normalizedError = errParts.length > 1 ?\n      {message: errParts[1], debug: errParts[0]} :\n      {message: error};\n  } else {\n    normalizedError = {\n      message: error.message,\n      debug: JSON.stringify(error)\n    };\n  }\n  return normalizedError;\n};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import createDataContext from './createDataContext';\nconst TYPES = {\n  ADD_NOTIFICATION: 'notifications/add_notification'\n};\nconst initialState = {\n  message: undefined\n};\n\nconst notificationsReducer = (state, action) => {\n  switch (action.type) {\n    case TYPES.ADD_NOTIFICATION:\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nconst setNotification = dispatch => message => {\n  dispatch({\n    type: TYPES.ADD_NOTIFICATION,\n    payload: message\n  });\n};\n\nconst clearNotifications = dispatch => () => {\n  dispatch({\n    type: TYPES.ADD_NOTIFICATION,\n    payload: undefined\n  });\n};\n\nexport const {\n  Provider,\n  Context\n} = createDataContext(notificationsReducer, {\n  setNotification,\n  clearNotifications\n}, initialState);","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/context/NotificationsContext.js"],"names":["createDataContext","TYPES","ADD_NOTIFICATION","initialState","message","undefined","notificationsReducer","state","action","type","payload","setNotification","dispatch","clearNotifications","Provider","Context"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,gBAAgB,EAAE;AADN,CAAd;AAIA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAEC;AADU,CAArB;;AAIA,MAAMC,oBAAoB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,KAAK,CAACC,gBAAX;AACE,aAAOM,MAAM,CAACE,OAAd;;AACF;AACE,aAAOH,KAAP;AAJJ;AAMD,CAPD;;AASA,MAAMI,eAAe,GAAIC,QAAD,IAAeR,OAAD,IAAa;AACjDQ,EAAAA,QAAQ,CAAC;AACPH,IAAAA,IAAI,EAAER,KAAK,CAACC,gBADL;AAEPQ,IAAAA,OAAO,EAAEN;AAFF,GAAD,CAAR;AAID,CALD;;AAOA,MAAMS,kBAAkB,GAAID,QAAD,IAAc,MAAM;AAC7CA,EAAAA,QAAQ,CAAC;AACPH,IAAAA,IAAI,EAAER,KAAK,CAACC,gBADL;AAEPQ,IAAAA,OAAO,EAAEL;AAFF,GAAD,CAAR;AAID,CALD;;AAOA,OAAO,MAAM;AAAES,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAAwBf,iBAAiB,CACpDM,oBADoD,EAEpD;AAACK,EAAAA,eAAD;AAAkBE,EAAAA;AAAlB,CAFoD,EAGpDV,YAHoD,CAA/C","sourcesContent":["import createDataContext from './createDataContext';\n\nconst TYPES = {\n  ADD_NOTIFICATION: 'notifications/add_notification'\n}\n\nconst initialState = {\n  message: undefined\n}\n\nconst notificationsReducer = (state, action) => {\n  switch (action.type) {\n    case TYPES.ADD_NOTIFICATION:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nconst setNotification = (dispatch) => (message) => {\n  dispatch({\n    type: TYPES.ADD_NOTIFICATION,\n    payload: message\n  })\n}\n\nconst clearNotifications = (dispatch) => () => {\n  dispatch({\n    type: TYPES.ADD_NOTIFICATION,\n    payload: undefined\n  })\n}\n\nexport const { Provider, Context } = createDataContext(\n  notificationsReducer,\n  {setNotification, clearNotifications},\n  initialState\n)"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import createDataContext from './createDataContext';\nimport { azureProvider, getAccessToken, parseJwt } from '../utils/security.util';\nconst TYPES = {\n  ADD_ERROR: 'auth/add_error',\n  LOGIN: 'auth/login',\n  SIGN_OUT: 'auth/signOut',\n  CLEAR_ERROR: 'auth/clearError',\n  SET_USER: 'auth/setUser'\n};\nconst initialState = {\n  isAuthenticated: false,\n  token: null,\n  errorMessage: '',\n  username: null\n};\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case TYPES.ADD_ERROR:\n      return { ...state,\n        errorMessage: action.payload\n      };\n\n    case TYPES.LOGIN:\n      return {\n        username: action.payload.name,\n        isAuthenticated: true,\n        errorMessage: '',\n        token: action.payload.token\n      };\n\n    case TYPES.CLEAR_ERROR:\n      return { ...state,\n        errorMessage: ''\n      };\n\n    case TYPES.SIGN_OUT:\n      return initialState;\n\n    case TYPES.SET_USER:\n      return { ...state,\n        username: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst signIn = dispatch => async () => {\n  const {\n    token,\n    account,\n    idToken\n  } = await getAccessToken();\n  const parsedJWT = parseJwt(idToken);\n  console.log(parsedJWT);\n  dispatch({\n    type: TYPES.LOGIN,\n    payload: {\n      token,\n      name: account.name\n    }\n  });\n};\n\nconst signOut = dispatch => async () => {\n  await azureProvider.logout();\n  dispatch({\n    type: TYPES.SIGN_OUT\n  });\n};\n\nexport const {\n  Provider,\n  Context\n} = createDataContext(authReducer, {\n  signIn,\n  signOut\n}, initialState);","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/context/AuthContext.js"],"names":["createDataContext","azureProvider","getAccessToken","parseJwt","TYPES","ADD_ERROR","LOGIN","SIGN_OUT","CLEAR_ERROR","SET_USER","initialState","isAuthenticated","token","errorMessage","username","authReducer","state","action","type","payload","name","signIn","dispatch","account","idToken","parsedJWT","console","log","signOut","logout","Provider","Context"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,QAAxC,QAAwD,wBAAxD;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,SAAS,EAAE,gBADC;AAEZC,EAAAA,KAAK,EAAE,YAFK;AAGZC,EAAAA,QAAQ,EAAE,cAHE;AAIZC,EAAAA,WAAW,EAAE,iBAJD;AAKZC,EAAAA,QAAQ,EAAE;AALE,CAAd;AAQA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,eAAe,EAAE,KADE;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,YAAY,EAAE,EAHK;AAInBC,EAAAA,QAAQ,EAAE;AAJS,CAArB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,KAAK,CAACC,SAAX;AACE,aAAO,EAAC,GAAGW,KAAJ;AAAWH,QAAAA,YAAY,EAAEI,MAAM,CAACE;AAAhC,OAAP;;AACF,SAAKf,KAAK,CAACE,KAAX;AACE,aAAO;AAACQ,QAAAA,QAAQ,EAAEG,MAAM,CAACE,OAAP,CAAeC,IAA1B;AAAgCT,QAAAA,eAAe,EAAE,IAAjD;AAAuDE,QAAAA,YAAY,EAAE,EAArE;AAAyED,QAAAA,KAAK,EAAEK,MAAM,CAACE,OAAP,CAAeP;AAA/F,OAAP;;AACF,SAAKR,KAAK,CAACI,WAAX;AACE,aAAO,EAAC,GAAGQ,KAAJ;AAAWH,QAAAA,YAAY,EAAE;AAAzB,OAAP;;AACF,SAAKT,KAAK,CAACG,QAAX;AACE,aAAOG,YAAP;;AACF,SAAKN,KAAK,CAACK,QAAX;AACE,aAAO,EAAC,GAAGO,KAAJ;AAAWF,QAAAA,QAAQ,EAAEG,MAAM,CAACE;AAA5B,OAAP;;AACF;AACE,aAAOH,KAAP;AAZJ;AAcD,CAfD;;AAiBA,MAAMK,MAAM,GAAIC,QAAD,IAAc,YAAY;AACvC,QAAM;AAACV,IAAAA,KAAD;AAAQW,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA4B,MAAMtB,cAAc,EAAtD;AACA,QAAMuB,SAAS,GAAGtB,QAAQ,CAACqB,OAAD,CAA1B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAH,EAAAA,QAAQ,CAAC;AACPJ,IAAAA,IAAI,EAAEd,KAAK,CAACE,KADL;AAEPa,IAAAA,OAAO,EAAE;AACPP,MAAAA,KADO;AAEPQ,MAAAA,IAAI,EAAEG,OAAO,CAACH;AAFP;AAFF,GAAD,CAAR;AAOD,CAXD;;AAaA,MAAMQ,OAAO,GAAIN,QAAD,IAAc,YAAY;AACxC,QAAMrB,aAAa,CAAC4B,MAAd,EAAN;AAEAP,EAAAA,QAAQ,CAAC;AACPJ,IAAAA,IAAI,EAAEd,KAAK,CAACG;AADL,GAAD,CAAR;AAGD,CAND;;AAQA,OAAO,MAAM;AAACuB,EAAAA,QAAD;AAAWC,EAAAA;AAAX,IAAsB/B,iBAAiB,CAClDe,WADkD,EAElD;AAACM,EAAAA,MAAD;AAASO,EAAAA;AAAT,CAFkD,EAGlDlB,YAHkD,CAA7C","sourcesContent":["import createDataContext from './createDataContext';\nimport { azureProvider, getAccessToken, parseJwt } from '../utils/security.util';\n\nconst TYPES = {\n  ADD_ERROR: 'auth/add_error',\n  LOGIN: 'auth/login',\n  SIGN_OUT: 'auth/signOut',\n  CLEAR_ERROR: 'auth/clearError',\n  SET_USER: 'auth/setUser'\n};\n\nconst initialState = {\n  isAuthenticated: false,\n  token: null,\n  errorMessage: '',\n  username: null\n};\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case TYPES.ADD_ERROR:\n      return {...state, errorMessage: action.payload};\n    case TYPES.LOGIN:\n      return {username: action.payload.name, isAuthenticated: true, errorMessage: '', token: action.payload.token};\n    case TYPES.CLEAR_ERROR:\n      return {...state, errorMessage: ''};\n    case TYPES.SIGN_OUT:\n      return initialState;\n    case TYPES.SET_USER:\n      return {...state, username: action.payload};\n    default:\n      return state;\n  }\n};\n\nconst signIn = (dispatch) => async () => {\n  const {token, account, idToken} = await getAccessToken();\n  const parsedJWT = parseJwt(idToken)\n  console.log(parsedJWT);\n  dispatch({\n    type: TYPES.LOGIN,\n    payload: {\n      token,\n      name: account.name\n    }\n  });\n};\n\nconst signOut = (dispatch) => async () => {\n  await azureProvider.logout();\n\n  dispatch({\n    type: TYPES.SIGN_OUT\n  });\n};\n\nexport const {Provider, Context} = createDataContext(\n  authReducer,\n  {signIn, signOut},\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}
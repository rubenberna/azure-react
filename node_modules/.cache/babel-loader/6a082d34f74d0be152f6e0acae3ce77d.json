{"ast":null,"code":"import createDataContext from './createDataContext';\nimport { azureProvider, getAccessToken } from '../utils/security.util';\nconst TYPES = {\n  ADD_ERROR: 'auth/add_error',\n  LOGIN: 'auth/login',\n  SIGN_OUT: 'auth/signOut',\n  CLEAR_ERROR: 'auth/clearError',\n  SET_USER: 'auth/setUser'\n};\nconst initialState = {\n  isAuthenticated: false,\n  token: null,\n  errorMessage: '',\n  username: null\n};\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case TYPES.ADD_ERROR:\n      return { ...state,\n        errorMessage: action.payload\n      };\n\n    case TYPES.LOGIN:\n      return { ...state,\n        isAuthenticated: true,\n        errorMessage: '',\n        token: action.payload\n      };\n\n    case TYPES.CLEAR_ERROR:\n      return { ...state,\n        errorMessage: ''\n      };\n\n    case TYPES.SIGN_OUT:\n      return initialState;\n\n    case TYPES.SET_USER:\n      return { ...state,\n        username: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst signIn = dispatch => async () => {\n  try {\n    const firstTimeRefresh = await getAccessToken();\n    dispatch({\n      type: TYPES.LOGIN,\n      payload: firstTimeRefresh\n    });\n  } catch (err) {\n    dispatch({\n      type: TYPES.ADD_ERROR,\n      payload: err\n    });\n  }\n};\n\nconst getProfile = dispatch => async () => {\n  const account = azureProvider.getAccount();\n  console.log(account); // if (account) {\n  //   dispatch({\n  //     type: TYPES.SET_USER,\n  //     payload: accounts[0].name\n  //   })\n  // }\n};\n\nconst signOut = dispatch => async () => {\n  await azureProvider.logout();\n  dispatch({\n    type: TYPES.SIGN_OUT\n  });\n}; // Todo: signout from FE\n\n\nexport const {\n  Provider,\n  Context\n} = createDataContext(authReducer, {\n  signIn,\n  getProfile,\n  signOut\n}, initialState);","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/context/AuthContext.js"],"names":["createDataContext","azureProvider","getAccessToken","TYPES","ADD_ERROR","LOGIN","SIGN_OUT","CLEAR_ERROR","SET_USER","initialState","isAuthenticated","token","errorMessage","username","authReducer","state","action","type","payload","signIn","dispatch","firstTimeRefresh","err","getProfile","account","getAccount","console","log","signOut","logout","Provider","Context"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,wBAA9C;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,SAAS,EAAE,gBADC;AAEZC,EAAAA,KAAK,EAAE,YAFK;AAGZC,EAAAA,QAAQ,EAAE,cAHE;AAIZC,EAAAA,WAAW,EAAE,iBAJD;AAKZC,EAAAA,QAAQ,EAAE;AALE,CAAd;AAQA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,eAAe,EAAE,KADE;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,YAAY,EAAE,EAHK;AAInBC,EAAAA,QAAQ,EAAE;AAJS,CAArB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,KAAK,CAACC,SAAX;AACE,aAAO,EAAC,GAAGW,KAAJ;AAAWH,QAAAA,YAAY,EAAEI,MAAM,CAACE;AAAhC,OAAP;;AACF,SAAKf,KAAK,CAACE,KAAX;AACE,aAAO,EAAC,GAAGU,KAAJ;AAAWL,QAAAA,eAAe,EAAE,IAA5B;AAAkCE,QAAAA,YAAY,EAAE,EAAhD;AAAoDD,QAAAA,KAAK,EAAEK,MAAM,CAACE;AAAlE,OAAP;;AACF,SAAKf,KAAK,CAACI,WAAX;AACE,aAAO,EAAC,GAAGQ,KAAJ;AAAWH,QAAAA,YAAY,EAAE;AAAzB,OAAP;;AACF,SAAKT,KAAK,CAACG,QAAX;AACE,aAAOG,YAAP;;AACF,SAAKN,KAAK,CAACK,QAAX;AACE,aAAO,EAAC,GAAGO,KAAJ;AAAWF,QAAAA,QAAQ,EAAEG,MAAM,CAACE;AAA5B,OAAP;;AACF;AACE,aAAOH,KAAP;AAZJ;AAcD,CAfD;;AAiBA,MAAMI,MAAM,GAAIC,QAAD,IAAc,YAAY;AACvC,MAAI;AACF,UAAMC,gBAAgB,GAAG,MAAMnB,cAAc,EAA7C;AACAkB,IAAAA,QAAQ,CAAC;AACPH,MAAAA,IAAI,EAAEd,KAAK,CAACE,KADL;AAEPa,MAAAA,OAAO,EAAEG;AAFF,KAAD,CAAR;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZF,IAAAA,QAAQ,CAAC;AACPH,MAAAA,IAAI,EAAEd,KAAK,CAACC,SADL;AAEPc,MAAAA,OAAO,EAAEI;AAFF,KAAD,CAAR;AAID;AACF,CAbD;;AAeA,MAAMC,UAAU,GAAIH,QAAD,IAAc,YAAY;AAC3C,QAAMI,OAAO,GAAGvB,aAAa,CAACwB,UAAd,EAAhB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAF2C,CAI3C;AACA;AACA;AACA;AACA;AACA;AACD,CAVD;;AAYA,MAAMI,OAAO,GAAIR,QAAD,IAAc,YAAY;AACxC,QAAMnB,aAAa,CAAC4B,MAAd,EAAN;AAEAT,EAAAA,QAAQ,CAAC;AACPH,IAAAA,IAAI,EAAEd,KAAK,CAACG;AADL,GAAD,CAAR;AAGD,CAND,C,CASA;;;AAEA,OAAO,MAAM;AAACwB,EAAAA,QAAD;AAAWC,EAAAA;AAAX,IAAsB/B,iBAAiB,CAClDc,WADkD,EAElD;AAACK,EAAAA,MAAD;AAASI,EAAAA,UAAT;AAAqBK,EAAAA;AAArB,CAFkD,EAGlDnB,YAHkD,CAA7C","sourcesContent":["import createDataContext from './createDataContext';\nimport { azureProvider, getAccessToken } from '../utils/security.util';\n\nconst TYPES = {\n  ADD_ERROR: 'auth/add_error',\n  LOGIN: 'auth/login',\n  SIGN_OUT: 'auth/signOut',\n  CLEAR_ERROR: 'auth/clearError',\n  SET_USER: 'auth/setUser'\n};\n\nconst initialState = {\n  isAuthenticated: false,\n  token: null,\n  errorMessage: '',\n  username: null\n}\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case TYPES.ADD_ERROR:\n      return {...state, errorMessage: action.payload};\n    case TYPES.LOGIN:\n      return {...state, isAuthenticated: true, errorMessage: '', token: action.payload};\n    case TYPES.CLEAR_ERROR:\n      return {...state, errorMessage: ''};\n    case TYPES.SIGN_OUT:\n      return initialState;\n    case TYPES.SET_USER:\n      return {...state, username: action.payload}\n    default:\n      return state;\n  }\n};\n\nconst signIn = (dispatch) => async () => {\n  try {\n    const firstTimeRefresh = await getAccessToken();\n    dispatch({\n      type: TYPES.LOGIN,\n      payload: firstTimeRefresh\n    });\n  } catch (err) {\n    dispatch({\n      type: TYPES.ADD_ERROR,\n      payload: err\n    });\n  }\n};\n\nconst getProfile = (dispatch) => async () => {\n  const account = azureProvider.getAccount();\n  console.log(account);\n\n  // if (account) {\n  //   dispatch({\n  //     type: TYPES.SET_USER,\n  //     payload: accounts[0].name\n  //   })\n  // }\n};\n\nconst signOut = (dispatch) => async () => {\n  await azureProvider.logout()\n\n  dispatch({\n    type: TYPES.SIGN_OUT\n  })\n}\n\n\n// Todo: signout from FE\n\nexport const {Provider, Context} = createDataContext(\n  authReducer,\n  {signIn, getProfile, signOut},\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}
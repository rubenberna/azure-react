{"ast":null,"code":"import { PublicClientApplication } from '@azure/msal-browser';\nimport { APP_ID, REDIRECT_URI } from '../config/environment';\nexport const MSAL_CONFIG = {\n  auth: {\n    clientId: APP_ID,\n    redirectUri: REDIRECT_URI\n  },\n  cache: {\n    cacheLocation: \"sessionStorage\",\n    storeAuthStateInCookie: true\n  }\n};\nconst scopes = ['user.read', 'mailboxsettings.read', 'calendars.readwrite'];\nexport const azureProvider = new PublicClientApplication(MSAL_CONFIG);\nexport const allAccounts = azureProvider.getAllAccounts();\n\nconst normalizeError = error => {\n  let normalizedError = {};\n\n  if (typeof error === 'string') {\n    const errParts = error.split('|');\n    normalizedError = errParts.length > 1 ? {\n      message: errParts[1],\n      debug: errParts[0]\n    } : {\n      message: error\n    };\n  } else {\n    normalizedError = {\n      message: error.message,\n      debug: JSON.stringify(error)\n    };\n  }\n\n  return normalizedError;\n};\n\nconst isInteractionNeeded = error => {\n  if (!error.message || error.message.length <= 0) {\n    return false;\n  }\n\n  return error.message.indexOf('consent_required') > -1 || error.message.indexOf('interaction_required') > -1 || error.message.indexOf('login_required') > -1 || error.message.indexOf('no_account_in_silent_request') > -1;\n};\n\nexport const getAccessToken = async scopes => {\n  try {\n    if ((allAccounts === null || allAccounts === void 0 ? void 0 : allAccounts.length) <= 0) throw new Error('login_required');\n    const silentResult = await azureProvider.acquireTokenSilent({\n      scopes: scopes,\n      account: allAccounts[0]\n    });\n    return silentResult.accessToken;\n  } catch (err) {\n    if (isInteractionNeeded(err)) {\n      const interactiveResult = await azureProvider.acquireTokenPopup({\n        scopes: scopes\n      });\n      return interactiveResult.accessToken;\n    } else {\n      throw err;\n    }\n  }\n};\nexport const getUserProfile = async () => {\n  try {\n    const accessToken = await getAccessToken(scopes);\n\n    if (accessToken) {\n      return {\n        isAuthenticated: true,\n        user: {},\n        error: {\n          message: \"Access token:\",\n          debug: accessToken\n        }\n      };\n    }\n  } catch (err) {\n    return {\n      isAuthenticated: false,\n      user: {},\n      error: normalizeError(err)\n    };\n  }\n};","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/utils/security.util.js"],"names":["PublicClientApplication","APP_ID","REDIRECT_URI","MSAL_CONFIG","auth","clientId","redirectUri","cache","cacheLocation","storeAuthStateInCookie","scopes","azureProvider","allAccounts","getAllAccounts","normalizeError","error","normalizedError","errParts","split","length","message","debug","JSON","stringify","isInteractionNeeded","indexOf","getAccessToken","Error","silentResult","acquireTokenSilent","account","accessToken","err","interactiveResult","acquireTokenPopup","getUserProfile","isAuthenticated","user"],"mappings":"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","sourcesContent":["import { PublicClientApplication } from '@azure/msal-browser';\nimport { APP_ID, REDIRECT_URI } from '../config/environment'\n\nexport const MSAL_CONFIG = {\n  auth: {\n    clientId: APP_ID,\n    redirectUri: REDIRECT_URI\n  },\n  cache: {\n    cacheLocation: \"sessionStorage\",\n    storeAuthStateInCookie: true\n  }\n};\n\nconst scopes = [\n  'user.read',\n  'mailboxsettings.read',\n  'calendars.readwrite'\n]\n\nexport const azureProvider = new PublicClientApplication(MSAL_CONFIG);\n\nexport const allAccounts = azureProvider.getAllAccounts();\n\nconst normalizeError = (error) => {\n  let normalizedError = {};\n\n  if (typeof (error) === 'string') {\n    const errParts = error.split('|');\n    normalizedError = errParts.length > 1 ?\n      {message: errParts[1], debug: errParts[0]} :\n      {message: error};\n  } else {\n    normalizedError = {\n      message: error.message,\n      debug: JSON.stringify(error)\n    };\n  }\n  return normalizedError;\n\n};\n\nconst isInteractionNeeded = (error) => {\n  if (!error.message || error.message.length <= 0) {\n    return false;\n  }\n\n  return (\n    error.message.indexOf('consent_required') > -1 ||\n    error.message.indexOf('interaction_required') > -1 ||\n    error.message.indexOf('login_required') > -1 ||\n    error.message.indexOf('no_account_in_silent_request') > -1\n  );\n};\n\nexport const getAccessToken = async (scopes) => {\n  try {\n    if (allAccounts?.length <= 0) throw new Error('login_required');\n    const silentResult = await azureProvider.acquireTokenSilent({\n      scopes: scopes,\n      account: allAccounts[0]\n    });\n\n    return silentResult.accessToken;\n\n  } catch (err) {\n    if (isInteractionNeeded(err)) {\n      const interactiveResult = await azureProvider.acquireTokenPopup({\n        scopes: scopes\n      });\n\n      return interactiveResult.accessToken;\n    } else {\n      throw err;\n    }\n  }\n};\n\nexport const getUserProfile = async () => {\n  try {\n    const accessToken = await getAccessToken(scopes);\n    if (accessToken) {\n      return {\n        isAuthenticated: true,\n        user: {},\n        error: {message: \"Access token:\", debug: accessToken}\n      };\n    }\n  } catch (err) {\n    return {\n      isAuthenticated: false,\n      user: {},\n      error: normalizeError(err)\n    };\n  }\n};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { PERMISSIONS } from '../consts/permissions.consts';\nimport { Context as NotificationsContext } from '../context/NotificationsContext';\nimport { DEFAULT_NOTIFICATIONS } from '../consts/notifications.consts';\nexport const userHasPermission = (permissionToCheck, role) => {\n  const permissionsArray = Object.values(PERMISSIONS);\n  const sortedPermissionsToCheck = permissionToCheck === null || permissionToCheck === void 0 ? void 0 : permissionToCheck.sort((a, b) => permissionsArray.indexOf(a) - permissionsArray.indexOf(b));\n  const bottomPermission = sortedPermissionsToCheck[sortedPermissionsToCheck.length - 1]; // Check if user role is included in required permissions\n\n  if (permissionToCheck.includes(role)) {\n    console.log('it does');\n    return true;\n  } // Check if user role is higher in hierarchy than the bottom permission of the dashboard\n\n\n  const userRoleIndex = permissionsArray.indexOf(role);\n  const permissionToCheckIndex = permissionsArray.indexOf(bottomPermission.toUpperCase());\n  return userRoleIndex <= permissionToCheckIndex;\n};\nexport const usePrivateRoute = (permissionToCheck, role) => {\n  _s();\n\n  const {\n    setNotification\n  } = useContext(NotificationsContext);\n  const history = useHistory();\n  useEffect(() => {\n    if (!role) {\n      setNotification(DEFAULT_NOTIFICATIONS.notAllowed);\n      history.push('/');\n    }\n\n    if (role && permissionToCheck) {\n      setNotification(DEFAULT_NOTIFICATIONS.notAllowed);\n      !userHasPermission(permissionToCheck, role) && history.push('/');\n    }\n  }, [permissionToCheck, role]);\n};\n\n_s(usePrivateRoute, \"Kc4k18kvYrYbmpwFtnlyhzPRqD8=\", false, function () {\n  return [useHistory];\n});","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/utils/useUserHasPermission.util.js"],"names":["useEffect","useContext","useHistory","PERMISSIONS","Context","NotificationsContext","DEFAULT_NOTIFICATIONS","userHasPermission","permissionToCheck","role","permissionsArray","Object","values","sortedPermissionsToCheck","sort","a","b","indexOf","bottomPermission","length","includes","console","log","userRoleIndex","permissionToCheckIndex","toUpperCase","usePrivateRoute","setNotification","history","notAllowed","push"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,OAAO,IAAIC,oBAApB,QAAgD,iCAAhD;AACA,SAASC,qBAAT,QAAsC,gCAAtC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,iBAAD,EAAoBC,IAApB,KAA6B;AAC5D,QAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAcT,WAAd,CAAzB;AACA,QAAMU,wBAAwB,GAAGL,iBAAH,aAAGA,iBAAH,uBAAGA,iBAAiB,CAAEM,IAAnB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAUN,gBAAgB,CAACO,OAAjB,CAAyBF,CAAzB,IAA8BL,gBAAgB,CAACO,OAAjB,CAAyBD,CAAzB,CAAhE,CAAjC;AACA,QAAME,gBAAgB,GAAGL,wBAAwB,CAACA,wBAAwB,CAACM,MAAzB,GAAkC,CAAnC,CAAjD,CAH4D,CAK5D;;AACA,MAAIX,iBAAiB,CAACY,QAAlB,CAA2BX,IAA3B,CAAJ,EAAsC;AACpCY,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,WAAO,IAAP;AACD,GAT2D,CAU5D;;;AACA,QAAMC,aAAa,GAAGb,gBAAgB,CAACO,OAAjB,CAAyBR,IAAzB,CAAtB;AACA,QAAMe,sBAAsB,GAAGd,gBAAgB,CAACO,OAAjB,CAAyBC,gBAAgB,CAACO,WAAjB,EAAzB,CAA/B;AAEA,SAAOF,aAAa,IAAIC,sBAAxB;AACD,CAfM;AAiBP,OAAO,MAAME,eAAe,GAAG,CAAClB,iBAAD,EAAoBC,IAApB,KAA6B;AAAA;;AAC1D,QAAM;AAACkB,IAAAA;AAAD,MAAoB1B,UAAU,CAACI,oBAAD,CAApC;AACA,QAAMuB,OAAO,GAAG1B,UAAU,EAA1B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACS,IAAL,EAAW;AACTkB,MAAAA,eAAe,CAACrB,qBAAqB,CAACuB,UAAvB,CAAf;AACAD,MAAAA,OAAO,CAACE,IAAR,CAAa,GAAb;AACD;;AACD,QAAIrB,IAAI,IAAID,iBAAZ,EAA+B;AAC7BmB,MAAAA,eAAe,CAACrB,qBAAqB,CAACuB,UAAvB,CAAf;AACA,OAACtB,iBAAiB,CAACC,iBAAD,EAAoBC,IAApB,CAAlB,IAA+CmB,OAAO,CAACE,IAAR,CAAa,GAAb,CAA/C;AACD;AACF,GATQ,EASN,CAACtB,iBAAD,EAAoBC,IAApB,CATM,CAAT;AAUD,CAdM;;GAAMiB,e;UAEKxB,U","sourcesContent":["import { useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { PERMISSIONS } from '../consts/permissions.consts';\nimport { Context as NotificationsContext } from '../context/NotificationsContext';\nimport { DEFAULT_NOTIFICATIONS } from '../consts/notifications.consts';\n\nexport const userHasPermission = (permissionToCheck, role) => {\n  const permissionsArray = Object.values(PERMISSIONS);\n  const sortedPermissionsToCheck = permissionToCheck?.sort((a, b) => permissionsArray.indexOf(a) - permissionsArray.indexOf(b));\n  const bottomPermission = sortedPermissionsToCheck[sortedPermissionsToCheck.length - 1];\n\n  // Check if user role is included in required permissions\n  if (permissionToCheck.includes(role)) {\n    console.log('it does');\n    return true;\n  }\n  // Check if user role is higher in hierarchy than the bottom permission of the dashboard\n  const userRoleIndex = permissionsArray.indexOf(role);\n  const permissionToCheckIndex = permissionsArray.indexOf(bottomPermission.toUpperCase());\n\n  return userRoleIndex <= permissionToCheckIndex;\n};\n\nexport const usePrivateRoute = (permissionToCheck, role) => {\n  const {setNotification} = useContext(NotificationsContext);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!role) {\n      setNotification(DEFAULT_NOTIFICATIONS.notAllowed)\n      history.push('/');\n    }\n    if (role && permissionToCheck) {\n      setNotification(DEFAULT_NOTIFICATIONS.notAllowed)\n      !userHasPermission(permissionToCheck, role) && history.push('/');\n    }\n  }, [permissionToCheck, role]);\n};"]},"metadata":{},"sourceType":"module"}
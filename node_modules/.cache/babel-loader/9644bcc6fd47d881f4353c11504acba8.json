{"ast":null,"code":"import createDataContext from './createDataContext';\nimport { azureProvider, getAccessToken } from '../utils/security.util';\nconst TYPES = {\n  ADD_ERROR: 'auth/add_error',\n  LOGIN: 'auth/login',\n  SIGN_OUT: 'auth/signOut',\n  CLEAR_ERROR: 'auth/clearError',\n  SET_USER: 'auth/setUser'\n};\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case TYPES.ADD_ERROR:\n      return { ...state,\n        errorMessage: action.payload\n      };\n\n    case TYPES.LOGIN:\n      return {\n        isAuthenticated: true,\n        errorMessage: '',\n        token: action.payload\n      };\n\n    case TYPES.CLEAR_ERROR:\n      return { ...state,\n        errorMessage: ''\n      };\n\n    case TYPES.SIGN_OUT:\n      return {\n        isAuthenticated: false,\n        token: null,\n        errorMessage: \"\"\n      };\n\n    case TYPES.SET_USER:\n      return { ...state,\n        username: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst signIn = dispatch => async () => {\n  try {\n    const firstTimeRefresh = await getAccessToken();\n    dispatch({\n      type: TYPES.LOGIN,\n      payload: firstTimeRefresh\n    });\n  } catch (err) {\n    dispatch({\n      type: TYPES.ADD_ERROR,\n      payload: err\n    });\n  }\n};\n\nconst getProfile = dispatch => async () => {\n  const accounts = azureProvider.getAllAccounts();\n  dispatch({\n    type: TYPES.SET_USER,\n    payload: accounts[0].name\n  });\n};\n\nexport const {\n  Provider,\n  Context\n} = createDataContext(authReducer, {\n  signIn,\n  getProfile\n}, {\n  username: '',\n  isAuthenticated: false,\n  token: null,\n  errorMessage: ''\n});","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/context/AuthContext.js"],"names":["createDataContext","azureProvider","getAccessToken","TYPES","ADD_ERROR","LOGIN","SIGN_OUT","CLEAR_ERROR","SET_USER","authReducer","state","action","type","errorMessage","payload","isAuthenticated","token","username","signIn","dispatch","firstTimeRefresh","err","getProfile","accounts","getAllAccounts","name","Provider","Context"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,wBAA9C;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,SAAS,EAAE,gBADC;AAEZC,EAAAA,KAAK,EAAE,YAFK;AAGZC,EAAAA,QAAQ,EAAE,cAHE;AAIZC,EAAAA,WAAW,EAAE,iBAJD;AAKZC,EAAAA,QAAQ,EAAE;AALE,CAAd;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,KAAK,CAACC,SAAX;AACE,aAAO,EAAC,GAAGM,KAAJ;AAAWG,QAAAA,YAAY,EAAEF,MAAM,CAACG;AAAhC,OAAP;;AACF,SAAKX,KAAK,CAACE,KAAX;AACE,aAAO;AAACU,QAAAA,eAAe,EAAE,IAAlB;AAAwBF,QAAAA,YAAY,EAAE,EAAtC;AAA0CG,QAAAA,KAAK,EAAEL,MAAM,CAACG;AAAxD,OAAP;;AACF,SAAKX,KAAK,CAACI,WAAX;AACE,aAAO,EAAC,GAAGG,KAAJ;AAAWG,QAAAA,YAAY,EAAE;AAAzB,OAAP;;AACF,SAAKV,KAAK,CAACG,QAAX;AACE,aAAO;AAACS,QAAAA,eAAe,EAAE,KAAlB;AAAyBC,QAAAA,KAAK,EAAE,IAAhC;AAAsCH,QAAAA,YAAY,EAAE;AAApD,OAAP;;AACF,SAAKV,KAAK,CAACK,QAAX;AACE,aAAO,EAAC,GAAGE,KAAJ;AAAWO,QAAAA,QAAQ,EAAEN,MAAM,CAACG;AAA5B,OAAP;;AACF;AACE,aAAOJ,KAAP;AAZJ;AAcD,CAfD;;AAiBA,MAAMQ,MAAM,GAAIC,QAAD,IAAc,YAAY;AACvC,MAAI;AACF,UAAMC,gBAAgB,GAAG,MAAMlB,cAAc,EAA7C;AACAiB,IAAAA,QAAQ,CAAC;AACPP,MAAAA,IAAI,EAAET,KAAK,CAACE,KADL;AAEPS,MAAAA,OAAO,EAAEM;AAFF,KAAD,CAAR;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZF,IAAAA,QAAQ,CAAC;AACPP,MAAAA,IAAI,EAAET,KAAK,CAACC,SADL;AAEPU,MAAAA,OAAO,EAAEO;AAFF,KAAD,CAAR;AAID;AACF,CAbD;;AAeA,MAAMC,UAAU,GAAIH,QAAD,IAAc,YAAY;AAC3C,QAAMI,QAAQ,GAAGtB,aAAa,CAACuB,cAAd,EAAjB;AACAL,EAAAA,QAAQ,CAAC;AACPP,IAAAA,IAAI,EAAET,KAAK,CAACK,QADL;AAEPM,IAAAA,OAAO,EAAES,QAAQ,CAAC,CAAD,CAAR,CAAYE;AAFd,GAAD,CAAR;AAID,CAND;;AAQA,OAAO,MAAM;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,IAAsB3B,iBAAiB,CAClDS,WADkD,EAElD;AAACS,EAAAA,MAAD;AAASI,EAAAA;AAAT,CAFkD,EAGlD;AAACL,EAAAA,QAAQ,EAAE,EAAX;AAAeF,EAAAA,eAAe,EAAE,KAAhC;AAAuCC,EAAAA,KAAK,EAAE,IAA9C;AAAoDH,EAAAA,YAAY,EAAE;AAAlE,CAHkD,CAA7C","sourcesContent":["import createDataContext from './createDataContext';\nimport { azureProvider, getAccessToken } from '../utils/security.util';\n\nconst TYPES = {\n  ADD_ERROR: 'auth/add_error',\n  LOGIN: 'auth/login',\n  SIGN_OUT: 'auth/signOut',\n  CLEAR_ERROR: 'auth/clearError',\n  SET_USER: 'auth/setUser'\n};\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case TYPES.ADD_ERROR:\n      return {...state, errorMessage: action.payload};\n    case TYPES.LOGIN:\n      return {isAuthenticated: true, errorMessage: '', token: action.payload};\n    case TYPES.CLEAR_ERROR:\n      return {...state, errorMessage: ''};\n    case TYPES.SIGN_OUT:\n      return {isAuthenticated: false, token: null, errorMessage: \"\"};\n    case TYPES.SET_USER:\n      return {...state, username: action.payload}\n    default:\n      return state;\n  }\n};\n\nconst signIn = (dispatch) => async () => {\n  try {\n    const firstTimeRefresh = await getAccessToken();\n    dispatch({\n      type: TYPES.LOGIN,\n      payload: firstTimeRefresh\n    });\n  } catch (err) {\n    dispatch({\n      type: TYPES.ADD_ERROR,\n      payload: err\n    });\n  }\n};\n\nconst getProfile = (dispatch) => async () => {\n  const accounts = azureProvider.getAllAccounts();\n  dispatch({\n    type: TYPES.SET_USER,\n    payload: accounts[0].name\n  })\n};\n\nexport const {Provider, Context} = createDataContext(\n  authReducer,\n  {signIn, getProfile},\n  {username: '', isAuthenticated: false, token: null, errorMessage: ''}\n);\n"]},"metadata":{},"sourceType":"module"}
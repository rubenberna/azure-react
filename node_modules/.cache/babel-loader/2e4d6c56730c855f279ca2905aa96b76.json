{"ast":null,"code":"import { UserAgentApplication } from 'msal';\nimport { APP_ID, REDIRECT_URI, SCOPES } from '../config/environment';\nconst MSAL_CONFIG = {\n  auth: {\n    clientId: APP_ID,\n    redirectUri: REDIRECT_URI\n  }\n};\nexport const azureProvider = new UserAgentApplication(MSAL_CONFIG);\nexport const scopeRequestConfig = {\n  scopes: SCOPES.split(',')\n};\nexport const getAccessToken = async () => {\n  const account = azureProvider.getAccount();\n  console.log(scopeRequestConfig); // try {\n  //   if (!account) throw new Error('login_required');\n  //   const silentResult = await azureProvider.acquireTokenSilent(scopeRequestConfig);\n  //   return silentResult.accessToken;\n  // } catch (err) {\n  //   if (isInteractionNeeded(err)) {\n  //     const interactiveResult = await azureProvider.acquireTokenPopup({\n  //       scopeRequestConfig\n  //     });\n  //\n  //     return interactiveResult.accessToken;\n  //   } else {\n  //     throw err;\n  //   }\n  // }\n};\n\nconst isInteractionNeeded = error => {\n  if (!error.message || error.message.length <= 0) {\n    return false;\n  }\n\n  return error.message.indexOf('consent_required') > -1 || error.message.indexOf('interaction_required') > -1 || error.message.indexOf('login_required') > -1 || error.message.indexOf('no_account_in_silent_request') > -1;\n};\n\nexport const getUserProfile = async () => {\n  try {\n    const accessToken = await getAccessToken(scopeRequestConfig);\n\n    if (accessToken) {\n      return {\n        isAuthenticated: true,\n        user: {},\n        error: {\n          message: \"Access token:\",\n          debug: accessToken\n        }\n      };\n    }\n  } catch (err) {\n    return {\n      isAuthenticated: false,\n      user: {},\n      error: normalizeError(err)\n    };\n  }\n};\n\nconst normalizeError = error => {\n  let normalizedError = {};\n\n  if (typeof error === 'string') {\n    const errParts = error.split('|');\n    normalizedError = errParts.length > 1 ? {\n      message: errParts[1],\n      debug: errParts[0]\n    } : {\n      message: error\n    };\n  } else {\n    normalizedError = {\n      message: error.message,\n      debug: JSON.stringify(error)\n    };\n  }\n\n  return normalizedError;\n};","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/utils/security.util.js"],"names":["UserAgentApplication","APP_ID","REDIRECT_URI","SCOPES","MSAL_CONFIG","auth","clientId","redirectUri","azureProvider","scopeRequestConfig","scopes","split","getAccessToken","account","getAccount","console","log","isInteractionNeeded","error","message","length","indexOf","getUserProfile","accessToken","isAuthenticated","user","debug","err","normalizeError","normalizedError","errParts","JSON","stringify"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,MAArC;AACA,SAASC,MAAT,EAAiBC,YAAjB,EAA+BC,MAA/B,QAA6C,uBAA7C;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAEL,MADN;AAEJM,IAAAA,WAAW,EAAEL;AAFT;AADY,CAApB;AAOA,OAAO,MAAMM,aAAa,GAAG,IAAIR,oBAAJ,CAAyBI,WAAzB,CAAtB;AACP,OAAO,MAAMK,kBAAkB,GAAG;AAChCC,EAAAA,MAAM,EAAEP,MAAM,CAACQ,KAAP,CAAa,GAAb;AADwB,CAA3B;AAIP,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,QAAMC,OAAO,GAAGL,aAAa,CAACM,UAAd,EAAhB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,kBAAZ,EAHwC,CAIxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAnBM;;AAqBP,MAAMQ,mBAAmB,GAAIC,KAAD,IAAW;AACrC,MAAI,CAACA,KAAK,CAACC,OAAP,IAAkBD,KAAK,CAACC,OAAN,CAAcC,MAAd,IAAwB,CAA9C,EAAiD;AAC/C,WAAO,KAAP;AACD;;AAED,SACEF,KAAK,CAACC,OAAN,CAAcE,OAAd,CAAsB,kBAAtB,IAA4C,CAAC,CAA7C,IACAH,KAAK,CAACC,OAAN,CAAcE,OAAd,CAAsB,sBAAtB,IAAgD,CAAC,CADjD,IAEAH,KAAK,CAACC,OAAN,CAAcE,OAAd,CAAsB,gBAAtB,IAA0C,CAAC,CAF3C,IAGAH,KAAK,CAACC,OAAN,CAAcE,OAAd,CAAsB,8BAAtB,IAAwD,CAAC,CAJ3D;AAMD,CAXD;;AAaA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,MAAI;AACF,UAAMC,WAAW,GAAG,MAAMX,cAAc,CAACH,kBAAD,CAAxC;;AACA,QAAIc,WAAJ,EAAiB;AACf,aAAO;AACLC,QAAAA,eAAe,EAAE,IADZ;AAELC,QAAAA,IAAI,EAAE,EAFD;AAGLP,QAAAA,KAAK,EAAE;AAACC,UAAAA,OAAO,EAAE,eAAV;AAA2BO,UAAAA,KAAK,EAAEH;AAAlC;AAHF,OAAP;AAKD;AACF,GATD,CASE,OAAOI,GAAP,EAAY;AACZ,WAAO;AACLH,MAAAA,eAAe,EAAE,KADZ;AAELC,MAAAA,IAAI,EAAE,EAFD;AAGLP,MAAAA,KAAK,EAAEU,cAAc,CAACD,GAAD;AAHhB,KAAP;AAKD;AACF,CAjBM;;AAmBP,MAAMC,cAAc,GAAIV,KAAD,IAAW;AAChC,MAAIW,eAAe,GAAG,EAAtB;;AAEA,MAAI,OAAQX,KAAR,KAAmB,QAAvB,EAAiC;AAC/B,UAAMY,QAAQ,GAAGZ,KAAK,CAACP,KAAN,CAAY,GAAZ,CAAjB;AACAkB,IAAAA,eAAe,GAAGC,QAAQ,CAACV,MAAT,GAAkB,CAAlB,GAChB;AAACD,MAAAA,OAAO,EAAEW,QAAQ,CAAC,CAAD,CAAlB;AAAuBJ,MAAAA,KAAK,EAAEI,QAAQ,CAAC,CAAD;AAAtC,KADgB,GAEhB;AAACX,MAAAA,OAAO,EAAED;AAAV,KAFF;AAGD,GALD,MAKO;AACLW,IAAAA,eAAe,GAAG;AAChBV,MAAAA,OAAO,EAAED,KAAK,CAACC,OADC;AAEhBO,MAAAA,KAAK,EAAEK,IAAI,CAACC,SAAL,CAAed,KAAf;AAFS,KAAlB;AAID;;AACD,SAAOW,eAAP;AACD,CAfD","sourcesContent":["import { UserAgentApplication } from 'msal'\nimport { APP_ID, REDIRECT_URI, SCOPES } from '../config/environment';\n\nconst MSAL_CONFIG = {\n  auth: {\n    clientId: APP_ID,\n    redirectUri: REDIRECT_URI,\n  }\n};\n\nexport const azureProvider = new UserAgentApplication(MSAL_CONFIG);\nexport const scopeRequestConfig = {\n  scopes: SCOPES.split(',')\n}\n\nexport const getAccessToken = async () => {\n  const account = azureProvider.getAccount();\n\n  console.log(scopeRequestConfig);\n  // try {\n  //   if (!account) throw new Error('login_required');\n  //   const silentResult = await azureProvider.acquireTokenSilent(scopeRequestConfig);\n  //   return silentResult.accessToken;\n  // } catch (err) {\n  //   if (isInteractionNeeded(err)) {\n  //     const interactiveResult = await azureProvider.acquireTokenPopup({\n  //       scopeRequestConfig\n  //     });\n  //\n  //     return interactiveResult.accessToken;\n  //   } else {\n  //     throw err;\n  //   }\n  // }\n};\n\nconst isInteractionNeeded = (error) => {\n  if (!error.message || error.message.length <= 0) {\n    return false;\n  }\n\n  return (\n    error.message.indexOf('consent_required') > -1 ||\n    error.message.indexOf('interaction_required') > -1 ||\n    error.message.indexOf('login_required') > -1 ||\n    error.message.indexOf('no_account_in_silent_request') > -1\n  );\n};\n\nexport const getUserProfile = async () => {\n  try {\n    const accessToken = await getAccessToken(scopeRequestConfig);\n    if (accessToken) {\n      return {\n        isAuthenticated: true,\n        user: {},\n        error: {message: \"Access token:\", debug: accessToken}\n      };\n    }\n  } catch (err) {\n    return {\n      isAuthenticated: false,\n      user: {},\n      error: normalizeError(err)\n    };\n  }\n};\n\nconst normalizeError = (error) => {\n  let normalizedError = {};\n\n  if (typeof (error) === 'string') {\n    const errParts = error.split('|');\n    normalizedError = errParts.length > 1 ?\n      {message: errParts[1], debug: errParts[0]} :\n      {message: error};\n  } else {\n    normalizedError = {\n      message: error.message,\n      debug: JSON.stringify(error)\n    };\n  }\n  return normalizedError;\n};"]},"metadata":{},"sourceType":"module"}
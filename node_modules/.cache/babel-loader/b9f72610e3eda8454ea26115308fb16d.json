{"ast":null,"code":"import{useEffect,useContext}from'react';import{useHistory}from'react-router-dom';import{PERMISSIONS}from'../../consts/permissions/permissions.consts';import{Context as NotificationsContext}from'../../context/notifications/NotificationsContext';import{DEFAULT_NOTIFICATIONS}from'../../consts/notifications/notifications.consts';export var userHasPermission=function userHasPermission(permissionToCheck,role){var permissionsArray=Object.values(PERMISSIONS);var sortedPermissionsToCheck=permissionToCheck===null||permissionToCheck===void 0?void 0:permissionToCheck.sort(function(a,b){return permissionsArray.indexOf(a)-permissionsArray.indexOf(b);});var bottomPermission=sortedPermissionsToCheck[sortedPermissionsToCheck.length-1];var userRoleIndex=permissionsArray.indexOf(role);var permissionToCheckIndex=permissionsArray.indexOf(bottomPermission.toUpperCase());if(userRoleIndex<0)return false;if(permissionToCheck.includes(role))return true;return userRoleIndex<=permissionToCheckIndex;};export var useProtectedNavigation=function useProtectedNavigation(){var history=useHistory();var _useContext=useContext(NotificationsContext),setNotification=_useContext.setNotification;var navigateSafely=function navigateSafely(requiredPermission,role,link){if(requiredPermission&&role){if(userHasPermission(requiredPermission,role)){history.push(link);}else{setNotification(DEFAULT_NOTIFICATIONS.notAllowed);}}};return{navigateSafely:navigateSafely};};export var usePrivateRoute=function usePrivateRoute(permissionToCheck,role){var _useContext2=useContext(NotificationsContext),setNotification=_useContext2.setNotification;var history=useHistory();useEffect(function(){if(!role){setNotification(DEFAULT_NOTIFICATIONS.notAllowed);history.push('/');}if(role&&permissionToCheck){if(!userHasPermission(permissionToCheck,role)){history.push('/');setNotification(DEFAULT_NOTIFICATIONS.notAllowed);}}},[permissionToCheck,role]);};","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/utils/permissions/useUserHasPermission.util.js"],"names":["useEffect","useContext","useHistory","PERMISSIONS","Context","NotificationsContext","DEFAULT_NOTIFICATIONS","userHasPermission","permissionToCheck","role","permissionsArray","Object","values","sortedPermissionsToCheck","sort","a","b","indexOf","bottomPermission","length","userRoleIndex","permissionToCheckIndex","toUpperCase","includes","useProtectedNavigation","history","setNotification","navigateSafely","requiredPermission","link","push","notAllowed","usePrivateRoute"],"mappings":"AAAA,OAASA,SAAT,CAAoBC,UAApB,KAAsC,OAAtC,CACA,OAASC,UAAT,KAA2B,kBAA3B,CACA,OAASC,WAAT,KAA4B,6CAA5B,CACA,OAASC,OAAO,GAAIC,CAAAA,oBAApB,KAAgD,kDAAhD,CACA,OAASC,qBAAT,KAAsC,iDAAtC,CAEA,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,iBAAD,CAAoBC,IAApB,CAA6B,CAC5D,GAAMC,CAAAA,gBAAgB,CAAGC,MAAM,CAACC,MAAP,CAAcT,WAAd,CAAzB,CACA,GAAMU,CAAAA,wBAAwB,CAAGL,iBAAH,SAAGA,iBAAH,iBAAGA,iBAAiB,CAAEM,IAAnB,CAAwB,SAACC,CAAD,CAAIC,CAAJ,QAAUN,CAAAA,gBAAgB,CAACO,OAAjB,CAAyBF,CAAzB,EAA8BL,gBAAgB,CAACO,OAAjB,CAAyBD,CAAzB,CAAxC,EAAxB,CAAjC,CACA,GAAME,CAAAA,gBAAgB,CAAGL,wBAAwB,CAACA,wBAAwB,CAACM,MAAzB,CAAkC,CAAnC,CAAjD,CACA,GAAMC,CAAAA,aAAa,CAAGV,gBAAgB,CAACO,OAAjB,CAAyBR,IAAzB,CAAtB,CACA,GAAMY,CAAAA,sBAAsB,CAAGX,gBAAgB,CAACO,OAAjB,CAAyBC,gBAAgB,CAACI,WAAjB,EAAzB,CAA/B,CAEA,GAAIF,aAAa,CAAG,CAApB,CAAuB,MAAO,MAAP,CACvB,GAAIZ,iBAAiB,CAACe,QAAlB,CAA2Bd,IAA3B,CAAJ,CAAsC,MAAO,KAAP,CACtC,MAAOW,CAAAA,aAAa,EAAIC,sBAAxB,CACD,CAVM,CAYP,MAAO,IAAMG,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,EAAM,CAC1C,GAAMC,CAAAA,OAAO,CAAGvB,UAAU,EAA1B,CAD0C,gBAEhBD,UAAU,CAACI,oBAAD,CAFM,CAEnCqB,eAFmC,aAEnCA,eAFmC,CAI1C,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,kBAAD,CAAqBnB,IAArB,CAA2BoB,IAA3B,CAAoC,CACzD,GAAID,kBAAkB,EAAInB,IAA1B,CAAgC,CAC9B,GAAIF,iBAAiB,CAACqB,kBAAD,CAAqBnB,IAArB,CAArB,CAAiD,CAC/CgB,OAAO,CAACK,IAAR,CAAaD,IAAb,EACD,CAFD,IAEO,CACLH,eAAe,CAACpB,qBAAqB,CAACyB,UAAvB,CAAf,CACD,CACF,CACF,CARD,CAUA,MAAO,CAAEJ,cAAc,CAAdA,cAAF,CAAP,CACD,CAfM,CAiBP,MAAO,IAAMK,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACxB,iBAAD,CAAoBC,IAApB,CAA6B,kBAChCR,UAAU,CAACI,oBAAD,CADsB,CACnDqB,eADmD,cACnDA,eADmD,CAE1D,GAAMD,CAAAA,OAAO,CAAGvB,UAAU,EAA1B,CAEAF,SAAS,CAAC,UAAM,CACd,GAAI,CAACS,IAAL,CAAW,CACTiB,eAAe,CAACpB,qBAAqB,CAACyB,UAAvB,CAAf,CACAN,OAAO,CAACK,IAAR,CAAa,GAAb,EACD,CACD,GAAIrB,IAAI,EAAID,iBAAZ,CAA+B,CAC7B,GAAI,CAACD,iBAAiB,CAACC,iBAAD,CAAoBC,IAApB,CAAtB,CAAiD,CAC/CgB,OAAO,CAACK,IAAR,CAAa,GAAb,EACAJ,eAAe,CAACpB,qBAAqB,CAACyB,UAAvB,CAAf,CACD,CACF,CACF,CAXQ,CAWN,CAACvB,iBAAD,CAAoBC,IAApB,CAXM,CAAT,CAYD,CAhBM","sourcesContent":["import { useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { PERMISSIONS } from '../../consts/permissions/permissions.consts';\nimport { Context as NotificationsContext } from '../../context/notifications/NotificationsContext';\nimport { DEFAULT_NOTIFICATIONS } from '../../consts/notifications/notifications.consts';\n\nexport const userHasPermission = (permissionToCheck, role) => {\n  const permissionsArray = Object.values(PERMISSIONS);\n  const sortedPermissionsToCheck = permissionToCheck?.sort((a, b) => permissionsArray.indexOf(a) - permissionsArray.indexOf(b));\n  const bottomPermission = sortedPermissionsToCheck[sortedPermissionsToCheck.length - 1];\n  const userRoleIndex = permissionsArray.indexOf(role);\n  const permissionToCheckIndex = permissionsArray.indexOf(bottomPermission.toUpperCase());\n\n  if (userRoleIndex < 0) return false\n  if (permissionToCheck.includes(role)) return true\n  return userRoleIndex <= permissionToCheckIndex;\n};\n\nexport const useProtectedNavigation = () => {\n  const history = useHistory();\n  const {setNotification} = useContext(NotificationsContext);\n\n  const navigateSafely = (requiredPermission, role, link) => {\n    if (requiredPermission && role) {\n      if (userHasPermission(requiredPermission, role)) {\n        history.push(link)\n      } else {\n        setNotification(DEFAULT_NOTIFICATIONS.notAllowed)\n      }\n    }\n  }\n\n  return { navigateSafely }\n}\n\nexport const usePrivateRoute = (permissionToCheck, role) => {\n  const {setNotification} = useContext(NotificationsContext);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!role) {\n      setNotification(DEFAULT_NOTIFICATIONS.notAllowed)\n      history.push('/');\n    }\n    if (role && permissionToCheck) {\n      if (!userHasPermission(permissionToCheck, role)) {\n        history.push('/');\n        setNotification(DEFAULT_NOTIFICATIONS.notAllowed)\n      }\n    }\n  }, [permissionToCheck, role]);\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import createDataContext from './createDataContext';\nimport { azureProvider, getAccessToken, getRolesFromParsedJwt, parseJwt } from '../utils/security.util';\nconst TYPES = {\n  ADD_ERROR: 'auth/add_error',\n  LOGIN: 'auth/login',\n  SIGN_OUT: 'auth/signOut',\n  CLEAR_ERROR: 'auth/clearError',\n  SET_USER: 'auth/setUser'\n};\nconst initialState = {\n  isAuthenticated: false,\n  token: null,\n  username: 'Albert',\n  role: null,\n  errorMessage: ''\n};\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case TYPES.ADD_ERROR:\n      return { ...state,\n        errorMessage: action.payload\n      };\n\n    case TYPES.LOGIN:\n      return {\n        username: action.payload.name,\n        isAuthenticated: true,\n        errorMessage: '',\n        token: action.payload.token,\n        role: action.payload.role\n      };\n\n    case TYPES.CLEAR_ERROR:\n      return { ...state,\n        errorMessage: ''\n      };\n\n    case TYPES.SIGN_OUT:\n      return initialState;\n\n    case TYPES.SET_USER:\n      return { ...state,\n        username: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst signIn = dispatch => async () => {\n  const {\n    token,\n    account,\n    idToken\n  } = await getAccessToken();\n  const parsedJWT = parseJwt(idToken);\n  const userRole = getRolesFromParsedJwt(parsedJWT);\n  dispatch({\n    type: TYPES.LOGIN,\n    payload: {\n      token,\n      name: account.name,\n      role: userRole\n    }\n  });\n};\n\nconst signOut = dispatch => async () => {\n  await azureProvider.logout();\n  dispatch({\n    type: TYPES.SIGN_OUT\n  });\n};\n\nexport const {\n  Provider,\n  Context\n} = createDataContext(authReducer, {\n  signIn,\n  signOut\n}, initialState);","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/context/AuthContext.js"],"names":["createDataContext","azureProvider","getAccessToken","getRolesFromParsedJwt","parseJwt","TYPES","ADD_ERROR","LOGIN","SIGN_OUT","CLEAR_ERROR","SET_USER","initialState","isAuthenticated","token","username","role","errorMessage","authReducer","state","action","type","payload","name","signIn","dispatch","account","idToken","parsedJWT","userRole","signOut","logout","Provider","Context"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,qBAAxC,EAA+DC,QAA/D,QAA+E,wBAA/E;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,SAAS,EAAE,gBADC;AAEZC,EAAAA,KAAK,EAAE,YAFK;AAGZC,EAAAA,QAAQ,EAAE,cAHE;AAIZC,EAAAA,WAAW,EAAE,iBAJD;AAKZC,EAAAA,QAAQ,EAAE;AALE,CAAd;AAQA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,eAAe,EAAE,KADE;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,QAAQ,EAAE,QAHS;AAInBC,EAAAA,IAAI,EAAE,IAJa;AAKnBC,EAAAA,YAAY,EAAE;AALK,CAArB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKf,KAAK,CAACC,SAAX;AACE,aAAO,EAAC,GAAGY,KAAJ;AAAWF,QAAAA,YAAY,EAAEG,MAAM,CAACE;AAAhC,OAAP;;AACF,SAAKhB,KAAK,CAACE,KAAX;AACE,aAAO;AAACO,QAAAA,QAAQ,EAAEK,MAAM,CAACE,OAAP,CAAeC,IAA1B;AAAgCV,QAAAA,eAAe,EAAE,IAAjD;AAAuDI,QAAAA,YAAY,EAAE,EAArE;AAAyEH,QAAAA,KAAK,EAAEM,MAAM,CAACE,OAAP,CAAeR,KAA/F;AAAsGE,QAAAA,IAAI,EAAEI,MAAM,CAACE,OAAP,CAAeN;AAA3H,OAAP;;AACF,SAAKV,KAAK,CAACI,WAAX;AACE,aAAO,EAAC,GAAGS,KAAJ;AAAWF,QAAAA,YAAY,EAAE;AAAzB,OAAP;;AACF,SAAKX,KAAK,CAACG,QAAX;AACE,aAAOG,YAAP;;AACF,SAAKN,KAAK,CAACK,QAAX;AACE,aAAO,EAAC,GAAGQ,KAAJ;AAAWJ,QAAAA,QAAQ,EAAEK,MAAM,CAACE;AAA5B,OAAP;;AACF;AACE,aAAOH,KAAP;AAZJ;AAcD,CAfD;;AAiBA,MAAMK,MAAM,GAAIC,QAAD,IAAc,YAAY;AACvC,QAAM;AAACX,IAAAA,KAAD;AAAQY,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA4B,MAAMxB,cAAc,EAAtD;AACA,QAAMyB,SAAS,GAAGvB,QAAQ,CAACsB,OAAD,CAA1B;AACA,QAAME,QAAQ,GAAGzB,qBAAqB,CAACwB,SAAD,CAAtC;AAEAH,EAAAA,QAAQ,CAAC;AACPJ,IAAAA,IAAI,EAAEf,KAAK,CAACE,KADL;AAEPc,IAAAA,OAAO,EAAE;AACPR,MAAAA,KADO;AAEPS,MAAAA,IAAI,EAAEG,OAAO,CAACH,IAFP;AAGPP,MAAAA,IAAI,EAAEa;AAHC;AAFF,GAAD,CAAR;AAQD,CAbD;;AAeA,MAAMC,OAAO,GAAIL,QAAD,IAAc,YAAY;AACxC,QAAMvB,aAAa,CAAC6B,MAAd,EAAN;AAEAN,EAAAA,QAAQ,CAAC;AACPJ,IAAAA,IAAI,EAAEf,KAAK,CAACG;AADL,GAAD,CAAR;AAGD,CAND;;AAQA,OAAO,MAAM;AAACuB,EAAAA,QAAD;AAAWC,EAAAA;AAAX,IAAsBhC,iBAAiB,CAClDiB,WADkD,EAElD;AAACM,EAAAA,MAAD;AAASM,EAAAA;AAAT,CAFkD,EAGlDlB,YAHkD,CAA7C","sourcesContent":["import createDataContext from './createDataContext';\nimport { azureProvider, getAccessToken, getRolesFromParsedJwt, parseJwt } from '../utils/security.util';\n\nconst TYPES = {\n  ADD_ERROR: 'auth/add_error',\n  LOGIN: 'auth/login',\n  SIGN_OUT: 'auth/signOut',\n  CLEAR_ERROR: 'auth/clearError',\n  SET_USER: 'auth/setUser'\n};\n\nconst initialState = {\n  isAuthenticated: false,\n  token: null,\n  username: 'Albert',\n  role: null,\n  errorMessage: ''\n};\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case TYPES.ADD_ERROR:\n      return {...state, errorMessage: action.payload};\n    case TYPES.LOGIN:\n      return {username: action.payload.name, isAuthenticated: true, errorMessage: '', token: action.payload.token, role: action.payload.role};\n    case TYPES.CLEAR_ERROR:\n      return {...state, errorMessage: ''};\n    case TYPES.SIGN_OUT:\n      return initialState;\n    case TYPES.SET_USER:\n      return {...state, username: action.payload};\n    default:\n      return state;\n  }\n};\n\nconst signIn = (dispatch) => async () => {\n  const {token, account, idToken} = await getAccessToken();\n  const parsedJWT = parseJwt(idToken);\n  const userRole = getRolesFromParsedJwt(parsedJWT);\n\n  dispatch({\n    type: TYPES.LOGIN,\n    payload: {\n      token,\n      name: account.name,\n      role: userRole\n    }\n  });\n};\n\nconst signOut = (dispatch) => async () => {\n  await azureProvider.logout();\n\n  dispatch({\n    type: TYPES.SIGN_OUT\n  });\n};\n\nexport const {Provider, Context} = createDataContext(\n  authReducer,\n  {signIn, signOut},\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}
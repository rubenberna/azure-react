{"ast":null,"code":"import { PublicClientApplication } from '@azure/msal-browser';\nimport { APP_ID, REDIRECT_URI, SCOPES } from '../config/environment';\nconst MSAL_CONFIG = {\n  auth: {\n    clientId: APP_ID,\n    redirectUri: window.location.origin,\n    postLogoutRedirectUri: window.location.origin\n  }\n};\nexport const azureProvider = new PublicClientApplication(MSAL_CONFIG);\nexport const scopeRequestConfig = {\n  scopes: SCOPES.split(',')\n};\nexport const getAccessToken = async () => {\n  const allAccounts = azureProvider.getAllAccounts();\n\n  try {\n    if ((allAccounts === null || allAccounts === void 0 ? void 0 : allAccounts.length) <= 0) throw new Error('login_required');\n    const silentResult = await azureProvider.acquireTokenSilent({\n      scopeRequestConfig,\n      account: allAccounts[0]\n    });\n    return {\n      token: silentResult.accessToken,\n      idToken: silentResult.idToken,\n      account: allAccounts[0]\n    };\n  } catch (err) {\n    if (isInteractionNeeded(err)) {\n      const interactiveResult = await azureProvider.loginPopup(scopeRequestConfig);\n      const allAccounts = azureProvider.getAllAccounts();\n      return {\n        token: interactiveResult.accessToken,\n        idToken: interactiveResult.idToken,\n        account: allAccounts[0]\n      };\n    } else {\n      throw err;\n    }\n  }\n};\nexport const isInteractionNeeded = error => {\n  if (!error.message || error.message.length <= 0) {\n    return false;\n  }\n\n  return error.message.indexOf('consent_required') > -1 || error.message.indexOf('interaction_required') > -1 || error.message.indexOf('login_required') > -1 || error.message.indexOf('no_account_in_silent_request') > -1;\n};\nexport const parseJwt = (token, accessToken) => {\n  const base64Url = token.split('.')[1];\n  console.log(accessToken.split('.')[0]);\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n  return JSON.parse(jsonPayload);\n};","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/utils/security.util.js"],"names":["PublicClientApplication","APP_ID","REDIRECT_URI","SCOPES","MSAL_CONFIG","auth","clientId","redirectUri","window","location","origin","postLogoutRedirectUri","azureProvider","scopeRequestConfig","scopes","split","getAccessToken","allAccounts","getAllAccounts","length","Error","silentResult","acquireTokenSilent","account","token","accessToken","idToken","err","isInteractionNeeded","interactiveResult","loginPopup","error","message","indexOf","parseJwt","base64Url","console","log","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse"],"mappings":"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","sourcesContent":["import { PublicClientApplication } from '@azure/msal-browser';\nimport { APP_ID, REDIRECT_URI, SCOPES } from '../config/environment';\n\nconst MSAL_CONFIG = {\n  auth: {\n    clientId: APP_ID,\n    redirectUri: window.location.origin,\n    postLogoutRedirectUri: window.location.origin,\n  },\n};\n\nexport const azureProvider = new PublicClientApplication(MSAL_CONFIG);\nexport const scopeRequestConfig = {\n  scopes: SCOPES.split(',')\n};\n\nexport const getAccessToken = async () => {\n  const allAccounts = azureProvider.getAllAccounts();\n  try {\n    if (allAccounts?.length <= 0) throw new Error('login_required');\n    const silentResult = await azureProvider.acquireTokenSilent({\n      scopeRequestConfig,\n      account: allAccounts[0]\n    });\n\n    return {\n      token: silentResult.accessToken,\n      idToken: silentResult.idToken,\n      account: allAccounts[0]\n    }\n  } catch (err) {\n    if (isInteractionNeeded(err)) {\n      const interactiveResult = await azureProvider.loginPopup(scopeRequestConfig);\n      const allAccounts = azureProvider.getAllAccounts();\n\n      return {\n        token: interactiveResult.accessToken,\n        idToken: interactiveResult.idToken,\n        account: allAccounts[0]\n      }\n    } else {\n      throw err;\n    }\n  }\n}\n\nexport const isInteractionNeeded = (error) => {\n  if (!error.message || error.message.length <= 0) {\n    return false;\n  }\n\n  return (\n    error.message.indexOf('consent_required') > -1 ||\n    error.message.indexOf('interaction_required') > -1 ||\n    error.message.indexOf('login_required') > -1 ||\n    error.message.indexOf('no_account_in_silent_request') > -1\n  );\n};\n\nexport const parseJwt = (token, accessToken) => {\n  const base64Url = token.split('.')[1];\n\n  console.log(accessToken.split('.')[0]);\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n\n  return JSON.parse(jsonPayload);\n};"]},"metadata":{},"sourceType":"module"}
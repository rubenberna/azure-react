{"ast":null,"code":"import createDataContext from './createDataContext';\nimport { azureProvider, isInteractionNeeded, scopeRequestConfig, getAccessToken } from '../utils/security.util';\nconst TYPES = {\n  ADD_ERROR: 'auth/add_error',\n  LOGIN: 'auth/login',\n  SIGN_OUT: 'auth/signOut',\n  CLEAR_ERROR: 'auth/clearError',\n  SET_USER: 'auth/setUser'\n};\nconst initialState = {\n  isAuthenticated: false,\n  token: null,\n  errorMessage: '',\n  username: null\n};\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case TYPES.ADD_ERROR:\n      return { ...state,\n        errorMessage: action.payload\n      };\n\n    case TYPES.LOGIN:\n      return {\n        username: action.payload.name,\n        isAuthenticated: true,\n        errorMessage: '',\n        token: action.payload.token\n      };\n\n    case TYPES.CLEAR_ERROR:\n      return { ...state,\n        errorMessage: ''\n      };\n\n    case TYPES.SIGN_OUT:\n      return initialState;\n\n    case TYPES.SET_USER:\n      return { ...state,\n        username: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst signIn = dispatch => async () => {\n  const first = await getAccessToken();\n  dispatch({\n    type: TYPES.LOGIN,\n    payload: {\n      token: first.token,\n      name: first.name\n    }\n  }); // const allAccounts = azureProvider.getAllAccounts();\n  // try {\n  //   if (allAccounts?.length <= 0) throw new Error('login_required');\n  //   const silentResult = await azureProvider.acquireTokenSilent({\n  //     scopeRequestConfig,\n  //     account: allAccounts[0]\n  //   });\n  //\n  //   dispatch({\n  //     type: TYPES.LOGIN,\n  //     payload: {\n  //       token: silentResult.accessToken,\n  //       name: allAccounts[0].name\n  //     }\n  //   });\n  // } catch (err) {\n  //   if (isInteractionNeeded(err)) {\n  //     const interactiveResult = await azureProvider.loginPopup(scopeRequestConfig);\n  //     const allAccounts = azureProvider.getAllAccounts();\n  //\n  //     dispatch({\n  //       type: TYPES.LOGIN,\n  //       payload: {\n  //         token: interactiveResult.accessToken,\n  //         name: allAccounts[0].name\n  //       }\n  //     });\n  //   } else {\n  //     throw err;\n  //   }\n  // }\n};\n\nconst signOut = dispatch => async () => {\n  await azureProvider.logout();\n  dispatch({\n    type: TYPES.SIGN_OUT\n  });\n};\n\nexport const {\n  Provider,\n  Context\n} = createDataContext(authReducer, {\n  signIn,\n  signOut\n}, initialState);","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/context/AuthContext.js"],"names":["createDataContext","azureProvider","isInteractionNeeded","scopeRequestConfig","getAccessToken","TYPES","ADD_ERROR","LOGIN","SIGN_OUT","CLEAR_ERROR","SET_USER","initialState","isAuthenticated","token","errorMessage","username","authReducer","state","action","type","payload","name","signIn","dispatch","first","signOut","logout","Provider","Context"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,SAASC,aAAT,EAAwBC,mBAAxB,EAA6CC,kBAA7C,EAAiEC,cAAjE,QAAuF,wBAAvF;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,SAAS,EAAE,gBADC;AAEZC,EAAAA,KAAK,EAAE,YAFK;AAGZC,EAAAA,QAAQ,EAAE,cAHE;AAIZC,EAAAA,WAAW,EAAE,iBAJD;AAKZC,EAAAA,QAAQ,EAAE;AALE,CAAd;AAQA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,eAAe,EAAE,KADE;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,YAAY,EAAE,EAHK;AAInBC,EAAAA,QAAQ,EAAE;AAJS,CAArB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,KAAK,CAACC,SAAX;AACE,aAAO,EAAC,GAAGW,KAAJ;AAAWH,QAAAA,YAAY,EAAEI,MAAM,CAACE;AAAhC,OAAP;;AACF,SAAKf,KAAK,CAACE,KAAX;AACE,aAAO;AAACQ,QAAAA,QAAQ,EAAEG,MAAM,CAACE,OAAP,CAAeC,IAA1B;AAAgCT,QAAAA,eAAe,EAAE,IAAjD;AAAuDE,QAAAA,YAAY,EAAE,EAArE;AAAyED,QAAAA,KAAK,EAAEK,MAAM,CAACE,OAAP,CAAeP;AAA/F,OAAP;;AACF,SAAKR,KAAK,CAACI,WAAX;AACE,aAAO,EAAC,GAAGQ,KAAJ;AAAWH,QAAAA,YAAY,EAAE;AAAzB,OAAP;;AACF,SAAKT,KAAK,CAACG,QAAX;AACE,aAAOG,YAAP;;AACF,SAAKN,KAAK,CAACK,QAAX;AACE,aAAO,EAAC,GAAGO,KAAJ;AAAWF,QAAAA,QAAQ,EAAEG,MAAM,CAACE;AAA5B,OAAP;;AACF;AACE,aAAOH,KAAP;AAZJ;AAcD,CAfD;;AAiBA,MAAMK,MAAM,GAAIC,QAAD,IAAc,YAAY;AACvC,QAAMC,KAAK,GAAG,MAAMpB,cAAc,EAAlC;AACAmB,EAAAA,QAAQ,CAAC;AACPJ,IAAAA,IAAI,EAAEd,KAAK,CAACE,KADL;AAEPa,IAAAA,OAAO,EAAE;AACPP,MAAAA,KAAK,EAAEW,KAAK,CAACX,KADN;AAEPQ,MAAAA,IAAI,EAAEG,KAAK,CAACH;AAFL;AAFF,GAAD,CAAR,CAFuC,CASvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAxCD;;AA0CA,MAAMI,OAAO,GAAIF,QAAD,IAAc,YAAY;AACxC,QAAMtB,aAAa,CAACyB,MAAd,EAAN;AAEAH,EAAAA,QAAQ,CAAC;AACPJ,IAAAA,IAAI,EAAEd,KAAK,CAACG;AADL,GAAD,CAAR;AAGD,CAND;;AAQA,OAAO,MAAM;AAACmB,EAAAA,QAAD;AAAWC,EAAAA;AAAX,IAAsB5B,iBAAiB,CAClDgB,WADkD,EAElD;AAACM,EAAAA,MAAD;AAASG,EAAAA;AAAT,CAFkD,EAGlDd,YAHkD,CAA7C","sourcesContent":["import createDataContext from './createDataContext';\nimport { azureProvider, isInteractionNeeded, scopeRequestConfig, getAccessToken } from '../utils/security.util';\n\nconst TYPES = {\n  ADD_ERROR: 'auth/add_error',\n  LOGIN: 'auth/login',\n  SIGN_OUT: 'auth/signOut',\n  CLEAR_ERROR: 'auth/clearError',\n  SET_USER: 'auth/setUser'\n};\n\nconst initialState = {\n  isAuthenticated: false,\n  token: null,\n  errorMessage: '',\n  username: null\n};\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case TYPES.ADD_ERROR:\n      return {...state, errorMessage: action.payload};\n    case TYPES.LOGIN:\n      return {username: action.payload.name, isAuthenticated: true, errorMessage: '', token: action.payload.token};\n    case TYPES.CLEAR_ERROR:\n      return {...state, errorMessage: ''};\n    case TYPES.SIGN_OUT:\n      return initialState;\n    case TYPES.SET_USER:\n      return {...state, username: action.payload};\n    default:\n      return state;\n  }\n};\n\nconst signIn = (dispatch) => async () => {\n  const first = await getAccessToken()\n  dispatch({\n    type: TYPES.LOGIN,\n    payload: {\n      token: first.token,\n      name: first.name\n    }\n  })\n  // const allAccounts = azureProvider.getAllAccounts();\n  // try {\n  //   if (allAccounts?.length <= 0) throw new Error('login_required');\n  //   const silentResult = await azureProvider.acquireTokenSilent({\n  //     scopeRequestConfig,\n  //     account: allAccounts[0]\n  //   });\n  //\n  //   dispatch({\n  //     type: TYPES.LOGIN,\n  //     payload: {\n  //       token: silentResult.accessToken,\n  //       name: allAccounts[0].name\n  //     }\n  //   });\n  // } catch (err) {\n  //   if (isInteractionNeeded(err)) {\n  //     const interactiveResult = await azureProvider.loginPopup(scopeRequestConfig);\n  //     const allAccounts = azureProvider.getAllAccounts();\n  //\n  //     dispatch({\n  //       type: TYPES.LOGIN,\n  //       payload: {\n  //         token: interactiveResult.accessToken,\n  //         name: allAccounts[0].name\n  //       }\n  //     });\n  //   } else {\n  //     throw err;\n  //   }\n  // }\n};\n\nconst signOut = (dispatch) => async () => {\n  await azureProvider.logout();\n\n  dispatch({\n    type: TYPES.SIGN_OUT\n  });\n};\n\nexport const {Provider, Context} = createDataContext(\n  authReducer,\n  {signIn, signOut},\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}
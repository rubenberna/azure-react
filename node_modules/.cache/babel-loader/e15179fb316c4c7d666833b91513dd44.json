{"ast":null,"code":"import { PublicClientApplication } from '@azure/msal-browser';\nimport { UserAgentApplication } from 'msal';\nimport { APP_ID, REDIRECT_URI, SCOPES } from '../config/environment';\nconst MSAL_CONFIG = {\n  auth: {\n    clientId: APP_ID,\n    authority: 'https://login.microsoftonline.com/common',\n    redirectUri: REDIRECT_URI\n  },\n  cache: {\n    cacheLocation: \"sessionStorage\",\n    storeAuthStateInCookie: true\n  }\n};\nconst VOLVO_CONFIG = {\n  auth: {\n    clientId: APP_ID,\n    authority: 'https://login.microsoftonline.com/common',\n    redirectUri: REDIRECT_URI,\n    postLogoutRedirectUri: REDIRECT_URI\n  }\n}; // export const azureProvider = new PublicClientApplication(MSAL_CONFIG);\n\nexport const azureProvider = new UserAgentApplication(VOLVO_CONFIG);\nexport const scopeRequestConfig = {\n  scopes: SCOPES.split(',')\n};\nazureProvider.handleRedirectCallback((error, res) => {\n  console.log('err', error);\n  console.log('res', res);\n});\nexport const getAccessToken = async () => {\n  const account = azureProvider.getAccount();\n  console.log(account);\n\n  try {\n    if (!account) throw new Error('login_required');\n    const silentResult = await azureProvider.acquireTokenSilent(scopeRequestConfig);\n    return silentResult.accessToken;\n  } catch (err) {\n    if (isInteractionNeeded(err)) {// azureProvider.loginRedirect(scopeRequestConfig)\n      // azureProvider.acquireTokenPopup(scopeRequestConfig)\n    } else {\n      throw err;\n    }\n  }\n}; // export const getAccessToken = async () => {\n//   const allAccounts = azureProvider.getAllAccounts();\n//\n//   try {\n//     if (allAccounts?.length <= 0) throw new Error('login_required');\n//     const silentResult = await azureProvider.acquireTokenSilent({\n//       scopeRequestConfig,\n//       account: allAccounts[0]\n//     });\n//\n//     return silentResult.accessToken;\n//   } catch (err) {\n//     if (isInteractionNeeded(err)) {\n//       const interactiveResult = await azureProvider.acquireTokenPopup({\n//         scopeRequestConfig\n//       });\n//\n//       return interactiveResult.accessToken;\n//     } else {\n//       throw err;\n//     }\n//   }\n// };\n\nconst isInteractionNeeded = error => {\n  if (!error.message || error.message.length <= 0) {\n    return false;\n  }\n\n  return error.message.indexOf('consent_required') > -1 || error.message.indexOf('interaction_required') > -1 || error.message.indexOf('login_required') > -1 || error.message.indexOf('no_account_in_silent_request') > -1;\n};\n\nexport const getUserProfile = async () => {\n  try {\n    const accessToken = await getAccessToken(scopeRequestConfig);\n\n    if (accessToken) {\n      return {\n        isAuthenticated: true,\n        user: {},\n        error: {\n          message: \"Access token:\",\n          debug: accessToken\n        }\n      };\n    }\n  } catch (err) {\n    return {\n      isAuthenticated: false,\n      user: {},\n      error: normalizeError(err)\n    };\n  }\n};\n\nconst normalizeError = error => {\n  let normalizedError = {};\n\n  if (typeof error === 'string') {\n    const errParts = error.split('|');\n    normalizedError = errParts.length > 1 ? {\n      message: errParts[1],\n      debug: errParts[0]\n    } : {\n      message: error\n    };\n  } else {\n    normalizedError = {\n      message: error.message,\n      debug: JSON.stringify(error)\n    };\n  }\n\n  return normalizedError;\n};","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/utils/security.util.js"],"names":["PublicClientApplication","UserAgentApplication","APP_ID","REDIRECT_URI","SCOPES","MSAL_CONFIG","auth","clientId","authority","redirectUri","cache","cacheLocation","storeAuthStateInCookie","VOLVO_CONFIG","postLogoutRedirectUri","azureProvider","scopeRequestConfig","scopes","split","handleRedirectCallback","error","res","console","log","getAccessToken","account","getAccount","Error","silentResult","acquireTokenSilent","accessToken","err","isInteractionNeeded","message","length","indexOf","getUserProfile","isAuthenticated","user","debug","normalizeError","normalizedError","errParts","JSON","stringify"],"mappings":"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","sourcesContent":["import { PublicClientApplication } from '@azure/msal-browser';\nimport { UserAgentApplication } from 'msal'\nimport { APP_ID, REDIRECT_URI, SCOPES } from '../config/environment';\n\nconst MSAL_CONFIG = {\n  auth: {\n    clientId: APP_ID,\n    authority: 'https://login.microsoftonline.com/common',\n    redirectUri: REDIRECT_URI\n  },\n  cache: {\n    cacheLocation: \"sessionStorage\",\n    storeAuthStateInCookie: true\n  }\n};\n\nconst VOLVO_CONFIG = {\n  auth: {\n    clientId: APP_ID,\n    authority: 'https://login.microsoftonline.com/common',\n    redirectUri: REDIRECT_URI,\n    postLogoutRedirectUri: REDIRECT_URI,\n  }\n}\n\n// export const azureProvider = new PublicClientApplication(MSAL_CONFIG);\nexport const azureProvider = new UserAgentApplication(VOLVO_CONFIG);\n\nexport const scopeRequestConfig = {\n  scopes: SCOPES.split(',')\n}\nazureProvider.handleRedirectCallback((error, res) => {\n  console.log('err', error);\n  console.log('res', res);\n})\n\nexport const getAccessToken = async () => {\n  const account = azureProvider.getAccount();\n  console.log(account);\n  try {\n    if (!account) throw new Error('login_required');\n    const silentResult = await azureProvider.acquireTokenSilent(scopeRequestConfig);\n\n    return silentResult.accessToken;\n  } catch (err) {\n    if (isInteractionNeeded(err)) {\n      // azureProvider.loginRedirect(scopeRequestConfig)\n      // azureProvider.acquireTokenPopup(scopeRequestConfig)\n    } else {\n      throw err;\n    }\n  }\n};\n\n// export const getAccessToken = async () => {\n//   const allAccounts = azureProvider.getAllAccounts();\n//\n//   try {\n//     if (allAccounts?.length <= 0) throw new Error('login_required');\n//     const silentResult = await azureProvider.acquireTokenSilent({\n//       scopeRequestConfig,\n//       account: allAccounts[0]\n//     });\n//\n//     return silentResult.accessToken;\n//   } catch (err) {\n//     if (isInteractionNeeded(err)) {\n//       const interactiveResult = await azureProvider.acquireTokenPopup({\n//         scopeRequestConfig\n//       });\n//\n//       return interactiveResult.accessToken;\n//     } else {\n//       throw err;\n//     }\n//   }\n// };\n\nconst isInteractionNeeded = (error) => {\n  if (!error.message || error.message.length <= 0) {\n    return false;\n  }\n\n  return (\n    error.message.indexOf('consent_required') > -1 ||\n    error.message.indexOf('interaction_required') > -1 ||\n    error.message.indexOf('login_required') > -1 ||\n    error.message.indexOf('no_account_in_silent_request') > -1\n  );\n};\n\nexport const getUserProfile = async () => {\n  try {\n    const accessToken = await getAccessToken(scopeRequestConfig);\n    if (accessToken) {\n      return {\n        isAuthenticated: true,\n        user: {},\n        error: {message: \"Access token:\", debug: accessToken}\n      };\n    }\n  } catch (err) {\n    return {\n      isAuthenticated: false,\n      user: {},\n      error: normalizeError(err)\n    };\n  }\n};\n\nconst normalizeError = (error) => {\n  let normalizedError = {};\n\n  if (typeof (error) === 'string') {\n    const errParts = error.split('|');\n    normalizedError = errParts.length > 1 ?\n      {message: errParts[1], debug: errParts[0]} :\n      {message: error};\n  } else {\n    normalizedError = {\n      message: error.message,\n      debug: JSON.stringify(error)\n    };\n  }\n  return normalizedError;\n};"]},"metadata":{},"sourceType":"module"}
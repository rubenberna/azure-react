{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { PERMISSIONS } from '../consts/permissions.consts';\nimport { Context as NotificationsContext } from '../context/NotificationsContext';\nimport { DEFAULT_NOTIFICATIONS } from '../consts/notifications.consts';\nexport const userHasPermission = (permissionToCheck, role) => {\n  const permissionsArray = Object.values(PERMISSIONS);\n  const sortedPermissionsToCheck = permissionToCheck === null || permissionToCheck === void 0 ? void 0 : permissionToCheck.sort((a, b) => permissionsArray.indexOf(a) - permissionsArray.indexOf(b));\n  const bottomPermission = sortedPermissionsToCheck[sortedPermissionsToCheck.length - 1];\n  const userRoleIndex = permissionsArray.indexOf(role);\n  const permissionToCheckIndex = permissionsArray.indexOf(bottomPermission.toUpperCase());\n  if (userRoleIndex < 0) return false;\n  if (permissionToCheck.includes(role)) return true;\n  return userRoleIndex <= permissionToCheckIndex;\n};\nexport const usePrivateRoute = (permissionToCheck, role) => {\n  _s();\n\n  const {\n    setNotification\n  } = useContext(NotificationsContext);\n  const history = useHistory();\n  useEffect(() => {\n    if (!role) {\n      setNotification(DEFAULT_NOTIFICATIONS.notAllowed);\n      history.push('/');\n    }\n\n    if (role && permissionToCheck) {\n      setNotification(DEFAULT_NOTIFICATIONS.notAllowed);\n      !userHasPermission(permissionToCheck, role) && history.push('/');\n    }\n  }, [permissionToCheck, role]);\n};\n\n_s(usePrivateRoute, \"Kc4k18kvYrYbmpwFtnlyhzPRqD8=\", false, function () {\n  return [useHistory];\n});\n\nexport const useProtectedNavigation = () => {\n  _s2();\n\n  const history = useHistory();\n  const {\n    setNotification\n  } = useContext(NotificationsContext);\n\n  const navigateSafely = (requiredPermission, role, link) => {\n    if (requiredPermission && role) {\n      if (userHasPermission(requiredPermission, role)) {\n        history.push(link);\n      } else {\n        setNotification(DEFAULT_NOTIFICATIONS.notAllowed);\n      }\n    }\n  };\n\n  return {\n    navigateSafely\n  };\n};\n\n_s2(useProtectedNavigation, \"Q2UzlBob8zCTa6Tcrk+456NLH6E=\", false, function () {\n  return [useHistory];\n});","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/utils/useUserHasPermission.util.js"],"names":["useEffect","useContext","useHistory","PERMISSIONS","Context","NotificationsContext","DEFAULT_NOTIFICATIONS","userHasPermission","permissionToCheck","role","permissionsArray","Object","values","sortedPermissionsToCheck","sort","a","b","indexOf","bottomPermission","length","userRoleIndex","permissionToCheckIndex","toUpperCase","includes","usePrivateRoute","setNotification","history","notAllowed","push","useProtectedNavigation","navigateSafely","requiredPermission","link"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,OAAO,IAAIC,oBAApB,QAAgD,iCAAhD;AACA,SAASC,qBAAT,QAAsC,gCAAtC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,iBAAD,EAAoBC,IAApB,KAA6B;AAC5D,QAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAcT,WAAd,CAAzB;AACA,QAAMU,wBAAwB,GAAGL,iBAAH,aAAGA,iBAAH,uBAAGA,iBAAiB,CAAEM,IAAnB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAUN,gBAAgB,CAACO,OAAjB,CAAyBF,CAAzB,IAA8BL,gBAAgB,CAACO,OAAjB,CAAyBD,CAAzB,CAAhE,CAAjC;AACA,QAAME,gBAAgB,GAAGL,wBAAwB,CAACA,wBAAwB,CAACM,MAAzB,GAAkC,CAAnC,CAAjD;AACA,QAAMC,aAAa,GAAGV,gBAAgB,CAACO,OAAjB,CAAyBR,IAAzB,CAAtB;AACA,QAAMY,sBAAsB,GAAGX,gBAAgB,CAACO,OAAjB,CAAyBC,gBAAgB,CAACI,WAAjB,EAAzB,CAA/B;AAEA,MAAIF,aAAa,GAAG,CAApB,EAAuB,OAAO,KAAP;AACvB,MAAIZ,iBAAiB,CAACe,QAAlB,CAA2Bd,IAA3B,CAAJ,EAAsC,OAAO,IAAP;AACtC,SAAOW,aAAa,IAAIC,sBAAxB;AACD,CAVM;AAYP,OAAO,MAAMG,eAAe,GAAG,CAAChB,iBAAD,EAAoBC,IAApB,KAA6B;AAAA;;AAC1D,QAAM;AAACgB,IAAAA;AAAD,MAAoBxB,UAAU,CAACI,oBAAD,CAApC;AACA,QAAMqB,OAAO,GAAGxB,UAAU,EAA1B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACS,IAAL,EAAW;AACTgB,MAAAA,eAAe,CAACnB,qBAAqB,CAACqB,UAAvB,CAAf;AACAD,MAAAA,OAAO,CAACE,IAAR,CAAa,GAAb;AACD;;AACD,QAAInB,IAAI,IAAID,iBAAZ,EAA+B;AAC7BiB,MAAAA,eAAe,CAACnB,qBAAqB,CAACqB,UAAvB,CAAf;AACA,OAACpB,iBAAiB,CAACC,iBAAD,EAAoBC,IAApB,CAAlB,IAA+CiB,OAAO,CAACE,IAAR,CAAa,GAAb,CAA/C;AACD;AACF,GATQ,EASN,CAACpB,iBAAD,EAAoBC,IAApB,CATM,CAAT;AAUD,CAdM;;GAAMe,e;UAEKtB,U;;;AAclB,OAAO,MAAM2B,sBAAsB,GAAG,MAAM;AAAA;;AAC1C,QAAMH,OAAO,GAAGxB,UAAU,EAA1B;AACA,QAAM;AAACuB,IAAAA;AAAD,MAAoBxB,UAAU,CAACI,oBAAD,CAApC;;AAEA,QAAMyB,cAAc,GAAG,CAACC,kBAAD,EAAqBtB,IAArB,EAA2BuB,IAA3B,KAAoC;AACzD,QAAID,kBAAkB,IAAItB,IAA1B,EAAgC;AAC9B,UAAIF,iBAAiB,CAACwB,kBAAD,EAAqBtB,IAArB,CAArB,EAAiD;AAC/CiB,QAAAA,OAAO,CAACE,IAAR,CAAaI,IAAb;AACD,OAFD,MAEO;AACLP,QAAAA,eAAe,CAACnB,qBAAqB,CAACqB,UAAvB,CAAf;AACD;AACF;AACF,GARD;;AAUA,SAAO;AAAEG,IAAAA;AAAF,GAAP;AACD,CAfM;;IAAMD,sB;UACK3B,U","sourcesContent":["import { useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { PERMISSIONS } from '../consts/permissions.consts';\nimport { Context as NotificationsContext } from '../context/NotificationsContext';\nimport { DEFAULT_NOTIFICATIONS } from '../consts/notifications.consts';\n\nexport const userHasPermission = (permissionToCheck, role) => {\n  const permissionsArray = Object.values(PERMISSIONS);\n  const sortedPermissionsToCheck = permissionToCheck?.sort((a, b) => permissionsArray.indexOf(a) - permissionsArray.indexOf(b));\n  const bottomPermission = sortedPermissionsToCheck[sortedPermissionsToCheck.length - 1];\n  const userRoleIndex = permissionsArray.indexOf(role);\n  const permissionToCheckIndex = permissionsArray.indexOf(bottomPermission.toUpperCase());\n\n  if (userRoleIndex < 0) return false\n  if (permissionToCheck.includes(role)) return true\n  return userRoleIndex <= permissionToCheckIndex;\n};\n\nexport const usePrivateRoute = (permissionToCheck, role) => {\n  const {setNotification} = useContext(NotificationsContext);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!role) {\n      setNotification(DEFAULT_NOTIFICATIONS.notAllowed)\n      history.push('/');\n    }\n    if (role && permissionToCheck) {\n      setNotification(DEFAULT_NOTIFICATIONS.notAllowed)\n      !userHasPermission(permissionToCheck, role) && history.push('/');\n    }\n  }, [permissionToCheck, role]);\n};\n\nexport const useProtectedNavigation = () => {\n  const history = useHistory();\n  const {setNotification} = useContext(NotificationsContext);\n\n  const navigateSafely = (requiredPermission, role, link) => {\n    if (requiredPermission && role) {\n      if (userHasPermission(requiredPermission, role)) {\n        history.push(link)\n      } else {\n        setNotification(DEFAULT_NOTIFICATIONS.notAllowed)\n      }\n    }\n  }\n\n  return { navigateSafely }\n}"]},"metadata":{},"sourceType":"module"}
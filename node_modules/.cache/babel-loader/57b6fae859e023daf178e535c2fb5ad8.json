{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{Suspense,useContext,useEffect}from'react';import{BrowserRouter,Redirect,Route,Switch}from'react-router-dom';import history from'../config/history';import{Context as AuthContext}from'../context/auth/AuthContext';import{Context as NotificationsContext}from'../context/notifications/NotificationsContext';import{Dashboard}from'./dashboard/Dashboard';import{GenericTemplate}from'./genericTemplate';import{useGetDashboards}from'../utils/dashboard/useGetDashboards';import{TopNavbar}from'./topNavbar/TopNavbar';import{SideNavbar}from'./sideNavbar/SideNavbar';import{activateToast,Notifications}from'./notifications/Notifications';import'react-toastify/dist/ReactToastify.css';export var App=function App(){var _useContext=useContext(AuthContext),signIn=_useContext.signIn;var _useContext2=useContext(NotificationsContext),_useContext2$state=_useContext2.state,message=_useContext2$state.message,visible=_useContext2$state.visible;var _useGetDashboards=useGetDashboards(),dashBoardsList=_useGetDashboards.dashBoardsList;useEffect(function(){signIn();},[]);useEffect(function(){if(message&&visible){activateToast(message);}},[message,visible]);return/*#__PURE__*/_jsxs(BrowserRouter,{history:history,children:[/*#__PURE__*/_jsx(Notifications,{}),/*#__PURE__*/_jsx(TopNavbar,{}),/*#__PURE__*/_jsx(SideNavbar,{}),/*#__PURE__*/_jsxs(Switch,{children:[/*#__PURE__*/_jsxs(Suspense,{fallback:/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"}),children:[/*#__PURE__*/_jsx(Route,{exact:true,path:\"/\",component:Dashboard}),dashBoardsList===null||dashBoardsList===void 0?void 0:dashBoardsList.map(function(dashboard){return/*#__PURE__*/_jsx(Route,{path:dashboard.slug,exact:true,render:function render(){return/*#__PURE__*/_jsx(GenericTemplate,{dashboard:dashboard,children:dashboard.component});}},dashboard.slug);})]}),/*#__PURE__*/_jsx(Route,{path:\"*\",children:/*#__PURE__*/_jsx(Redirect,{to:\"/\"})})]})]});};","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/components/App.jsx"],"names":["React","Suspense","useContext","useEffect","BrowserRouter","Redirect","Route","Switch","history","Context","AuthContext","NotificationsContext","Dashboard","GenericTemplate","useGetDashboards","TopNavbar","SideNavbar","activateToast","Notifications","App","signIn","state","message","visible","dashBoardsList","map","dashboard","slug","component"],"mappings":"wFAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,CAAsCC,SAAtC,KAAuD,OAAvD,CACA,OAASC,aAAT,CAAwBC,QAAxB,CAAkCC,KAAlC,CAAyCC,MAAzC,KAAuD,kBAAvD,CACA,MAAOC,CAAAA,OAAP,KAAoB,mBAApB,CACA,OAASC,OAAO,GAAIC,CAAAA,WAApB,KAAuC,6BAAvC,CACA,OAASD,OAAO,GAAIE,CAAAA,oBAApB,KAAgD,+CAAhD,CACA,OAASC,SAAT,KAA0B,uBAA1B,CACA,OAASC,eAAT,KAAgC,mBAAhC,CACA,OAASC,gBAAT,KAAiC,qCAAjC,CACA,OAASC,SAAT,KAA0B,uBAA1B,CACA,OAASC,UAAT,KAA2B,yBAA3B,CACA,OAASC,aAAT,CAAwBC,aAAxB,KAA6C,+BAA7C,CACA,MAAO,uCAAP,CAGA,MAAO,IAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,EAAM,iBACNjB,UAAU,CAACQ,WAAD,CADJ,CAChBU,MADgB,aAChBA,MADgB,kBAEalB,UAAU,CAACS,oBAAD,CAFvB,iCAEhBU,KAFgB,CAERC,OAFQ,oBAERA,OAFQ,CAECC,OAFD,oBAECA,OAFD,uBAGET,gBAAgB,EAHlB,CAGhBU,cAHgB,mBAGhBA,cAHgB,CAKvBrB,SAAS,CAAC,UAAM,CACdiB,MAAM,GACP,CAFQ,CAEN,EAFM,CAAT,CAIAjB,SAAS,CAAC,UAAM,CACd,GAAImB,OAAO,EAAIC,OAAf,CAAwB,CACtBN,aAAa,CAACK,OAAD,CAAb,CACD,CACF,CAJQ,CAIN,CAACA,OAAD,CAAUC,OAAV,CAJM,CAAT,CAMA,mBACE,MAAC,aAAD,EAAe,OAAO,CAAEf,OAAxB,wBACE,KAAC,aAAD,IADF,cAEE,KAAC,SAAD,IAFF,cAGE,KAAC,UAAD,IAHF,cAIE,MAAC,MAAD,yBACE,MAAC,QAAD,EAAU,QAAQ,cAAE,mCAApB,wBACE,KAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,GAAlB,CAAsB,SAAS,CAAEI,SAAjC,EADF,CAEGY,cAFH,SAEGA,cAFH,iBAEGA,cAAc,CAAEC,GAAhB,CAAoB,SAAAC,SAAS,qBAC5B,KAAC,KAAD,EACE,IAAI,CAAEA,SAAS,CAACC,IADlB,CAEE,KAAK,KAFP,CAIE,MAAM,CAAE,qCAAM,KAAC,eAAD,EAAiB,SAAS,CAAED,SAA5B,UAAwCA,SAAS,CAACE,SAAlD,EAAN,EAJV,EAGOF,SAAS,CAACC,IAHjB,CAD4B,EAA7B,CAFH,GADF,cAYE,KAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,uBACE,KAAC,QAAD,EAAU,EAAE,CAAC,GAAb,EADF,EAZF,GAJF,GADF,CAuBD,CAtCM","sourcesContent":["import React, { Suspense, useContext, useEffect } from 'react';\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport history from '../config/history';\nimport { Context as AuthContext } from '../context/auth/AuthContext';\nimport { Context as NotificationsContext } from '../context/notifications/NotificationsContext';\nimport { Dashboard } from './dashboard/Dashboard';\nimport { GenericTemplate } from './genericTemplate';\nimport { useGetDashboards } from '../utils/dashboard/useGetDashboards';\nimport { TopNavbar } from './topNavbar/TopNavbar';\nimport { SideNavbar } from './sideNavbar/SideNavbar';\nimport { activateToast, Notifications } from './notifications/Notifications';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nexport const App = () => {\n  const {signIn} = useContext(AuthContext);\n  const {state: {message, visible}} = useContext(NotificationsContext);\n  const {dashBoardsList} = useGetDashboards();\n\n  useEffect(() => {\n    signIn();\n  }, []);\n\n  useEffect(() => {\n    if (message && visible) {\n      activateToast(message);\n    }\n  }, [message, visible]);\n\n  return (\n    <BrowserRouter history={history}>\n      <Notifications/>\n      <TopNavbar/>\n      <SideNavbar/>\n      <Switch>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Route exact path=\"/\" component={Dashboard}/>\n          {dashBoardsList?.map(dashboard => (\n            <Route\n              path={dashboard.slug}\n              exact\n              key={dashboard.slug}\n              render={() => <GenericTemplate dashboard={dashboard}>{dashboard.component}</GenericTemplate>}\n            />\n          ))}\n        </Suspense>\n        <Route path=\"*\">\n          <Redirect to=\"/\"/>\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
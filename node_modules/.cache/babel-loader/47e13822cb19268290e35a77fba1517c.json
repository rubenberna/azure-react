{"ast":null,"code":"import { PublicClientApplication } from '@azure/msal-browser';\nimport { APP_ID, REDIRECT_URI, SCOPES } from '../config/environment';\nconst MSAL_CONFIG = {\n  auth: {\n    clientId: APP_ID,\n    redirectUri: REDIRECT_URI,\n    postLogoutRedirectUri: REDIRECT_URI\n  }\n};\nexport const azureProvider = new PublicClientApplication(MSAL_CONFIG);\nexport const scopeRequestConfig = {\n  scopes: SCOPES.split(',')\n};\nexport const getAccessToken = async () => {\n  const allAccounts = await azureProvider.getAllAccounts();\n\n  try {\n    if ((allAccounts === null || allAccounts === void 0 ? void 0 : allAccounts.length) <= 0) throw new Error('login_required');\n    const silentResult = await azureProvider.acquireTokenSilent({\n      scopeRequestConfig,\n      account: allAccounts[0]\n    });\n    return silentResult.accessToken;\n  } catch (err) {\n    if (isInteractionNeeded(err)) {\n      console.log(err);\n      const interactiveResult = await azureProvider.loginRedirect(scopeRequestConfig);\n      return interactiveResult.accessToken;\n    } else {\n      throw err;\n    }\n  }\n};\n\nconst isInteractionNeeded = error => {\n  if (!error.message || error.message.length <= 0) {\n    return false;\n  }\n\n  return error.message.indexOf('consent_required') > -1 || error.message.indexOf('interaction_required') > -1 || error.message.indexOf('login_required') > -1 || error.message.indexOf('no_account_in_silent_request') > -1;\n};","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/utils/security.util.js"],"names":["PublicClientApplication","APP_ID","REDIRECT_URI","SCOPES","MSAL_CONFIG","auth","clientId","redirectUri","postLogoutRedirectUri","azureProvider","scopeRequestConfig","scopes","split","getAccessToken","allAccounts","getAllAccounts","length","Error","silentResult","acquireTokenSilent","account","accessToken","err","isInteractionNeeded","console","log","interactiveResult","loginRedirect","error","message","indexOf"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,qBAAxC;AACA,SAASC,MAAT,EAAiBC,YAAjB,EAA+BC,MAA/B,QAA6C,uBAA7C;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAEL,MADN;AAEJM,IAAAA,WAAW,EAAEL,YAFT;AAGJM,IAAAA,qBAAqB,EAAEN;AAHnB;AADY,CAApB;AAQA,OAAO,MAAMO,aAAa,GAAG,IAAIT,uBAAJ,CAA4BI,WAA5B,CAAtB;AACP,OAAO,MAAMM,kBAAkB,GAAG;AAChCC,EAAAA,MAAM,EAAER,MAAM,CAACS,KAAP,CAAa,GAAb;AADwB,CAA3B;AAIP,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,QAAMC,WAAW,GAAG,MAAML,aAAa,CAACM,cAAd,EAA1B;;AAEA,MAAI;AACF,QAAI,CAAAD,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEE,MAAb,KAAuB,CAA3B,EAA8B,MAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AAC9B,UAAMC,YAAY,GAAG,MAAMT,aAAa,CAACU,kBAAd,CAAiC;AAC1DT,MAAAA,kBAD0D;AAE1DU,MAAAA,OAAO,EAAEN,WAAW,CAAC,CAAD;AAFsC,KAAjC,CAA3B;AAKA,WAAOI,YAAY,CAACG,WAApB;AACD,GARD,CAQE,OAAOC,GAAP,EAAY;AACZ,QAAIC,mBAAmB,CAACD,GAAD,CAAvB,EAA8B;AAC5BE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,YAAMI,iBAAiB,GAAG,MAAMjB,aAAa,CAACkB,aAAd,CAA4BjB,kBAA5B,CAAhC;AACA,aAAOgB,iBAAiB,CAACL,WAAzB;AACD,KAJD,MAIO;AACL,YAAMC,GAAN;AACD;AACF;AACF,CApBM;;AAsBP,MAAMC,mBAAmB,GAAIK,KAAD,IAAW;AACrC,MAAI,CAACA,KAAK,CAACC,OAAP,IAAkBD,KAAK,CAACC,OAAN,CAAcb,MAAd,IAAwB,CAA9C,EAAiD;AAC/C,WAAO,KAAP;AACD;;AAED,SACEY,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsB,kBAAtB,IAA4C,CAAC,CAA7C,IACAF,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsB,sBAAtB,IAAgD,CAAC,CADjD,IAEAF,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsB,gBAAtB,IAA0C,CAAC,CAF3C,IAGAF,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsB,8BAAtB,IAAwD,CAAC,CAJ3D;AAMD,CAXD","sourcesContent":["import { PublicClientApplication } from '@azure/msal-browser';\nimport { APP_ID, REDIRECT_URI, SCOPES } from '../config/environment';\n\nconst MSAL_CONFIG = {\n  auth: {\n    clientId: APP_ID,\n    redirectUri: REDIRECT_URI,\n    postLogoutRedirectUri: REDIRECT_URI,\n  },\n};\n\nexport const azureProvider = new PublicClientApplication(MSAL_CONFIG);\nexport const scopeRequestConfig = {\n  scopes: SCOPES.split(',')\n};\n\nexport const getAccessToken = async () => {\n  const allAccounts = await azureProvider.getAllAccounts();\n\n  try {\n    if (allAccounts?.length <= 0) throw new Error('login_required');\n    const silentResult = await azureProvider.acquireTokenSilent({\n      scopeRequestConfig,\n      account: allAccounts[0]\n    });\n\n    return silentResult.accessToken;\n  } catch (err) {\n    if (isInteractionNeeded(err)) {\n      console.log(err);\n      const interactiveResult = await azureProvider.loginRedirect(scopeRequestConfig);\n      return interactiveResult.accessToken;\n    } else {\n      throw err;\n    }\n  }\n};\n\nconst isInteractionNeeded = (error) => {\n  if (!error.message || error.message.length <= 0) {\n    return false;\n  }\n\n  return (\n    error.message.indexOf('consent_required') > -1 ||\n    error.message.indexOf('interaction_required') > -1 ||\n    error.message.indexOf('login_required') > -1 ||\n    error.message.indexOf('no_account_in_silent_request') > -1\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
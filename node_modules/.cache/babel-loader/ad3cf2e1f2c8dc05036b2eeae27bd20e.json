{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/utils/dashboard/useGetDashboards.js\",\n    _s = $RefreshSig$();\n\nimport { lazy, useContext } from 'react';\nimport { metadata as appOneMetadata } from '@data-portal/app-one';\nimport { metadata as appTwoMetadata } from '@data-portal/app-two';\nimport { convertToKebabCase } from '../general/_general.util';\nimport { Context as AuthContext } from '../../context/AuthContext';\nconst GitHubFinder = /*#__PURE__*/lazy(_c = () => import('@data-portal/app-one'));\n_c2 = GitHubFinder;\nconst Counter = /*#__PURE__*/lazy(_c3 = () => import('@data-portal/app-two'));\n_c4 = Counter;\nexport const useGetDashboards = () => {\n  _s();\n\n  const {\n    state\n  } = useContext(AuthContext);\n  const listOfLibraries = [appOneMetadata, appTwoMetadata];\n\n  const DASHBOARDS = name => ({\n    APP_1: /*#__PURE__*/_jsxDEV(GitHubFinder, {\n      state: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this),\n    APP_2: /*#__PURE__*/_jsxDEV(Counter, {\n      state: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this)\n  })[name];\n\n  const dashBoardsList = listOfLibraries.map((dashboard, index) => ({\n    title: dashboard.title,\n    description: dashboard.description,\n    icon: dashboard.icon,\n    slug: `/${convertToKebabCase(dashboard.title)}`,\n    requiredPermissions: dashboard.requiredPermissions,\n    component: DASHBOARDS([`APP_${index + 1}`])\n  }));\n  return {\n    dashBoardsList\n  };\n};\n\n_s(useGetDashboards, \"InUhF7dRXCUahyxBMI4beA9RUck=\");\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"GitHubFinder$lazy\");\n$RefreshReg$(_c2, \"GitHubFinder\");\n$RefreshReg$(_c3, \"Counter$lazy\");\n$RefreshReg$(_c4, \"Counter\");","map":{"version":3,"sources":["/Users/rubenbernardes/Code/freelance/volvo/azure-context/src/utils/dashboard/useGetDashboards.js"],"names":["lazy","useContext","metadata","appOneMetadata","appTwoMetadata","convertToKebabCase","Context","AuthContext","GitHubFinder","Counter","useGetDashboards","state","listOfLibraries","DASHBOARDS","name","APP_1","APP_2","dashBoardsList","map","dashboard","index","title","description","icon","slug","requiredPermissions","component"],"mappings":";;;;;AAAA,SAASA,IAAT,EAAeC,UAAf,QAAiC,OAAjC;AACA,SAASC,QAAQ,IAAIC,cAArB,QAA2C,sBAA3C;AACA,SAASD,QAAQ,IAAIE,cAArB,QAA2C,sBAA3C;AACA,SAASC,kBAAT,QAAmC,0BAAnC;AACA,SAASC,OAAO,IAAIC,WAApB,QAAuC,2BAAvC;AAEA,MAAMC,YAAY,gBAAGR,IAAI,MAAC,MAAM,OAAO,sBAAP,CAAP,CAAzB;MAAMQ,Y;AACN,MAAMC,OAAO,gBAAGT,IAAI,OAAC,MAAM,OAAO,sBAAP,CAAP,CAApB;MAAMS,O;AAGN,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AACpC,QAAM;AAACC,IAAAA;AAAD,MAAUV,UAAU,CAACM,WAAD,CAA1B;AACA,QAAMK,eAAe,GAAG,CAACT,cAAD,EAAiBC,cAAjB,CAAxB;;AAEA,QAAMS,UAAU,GAAIC,IAAD,IAAU,CAAC;AAC5BC,IAAAA,KAAK,eAAE,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEJ;AAArB;AAAA;AAAA;AAAA;AAAA,YADqB;AAE5BK,IAAAA,KAAK,eAAE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEL;AAAhB;AAAA;AAAA;AAAA;AAAA;AAFqB,GAAD,EAG1BG,IAH0B,CAA7B;;AAMA,QAAMG,cAAc,GAAGL,eAAe,CAACM,GAAhB,CAAoB,CAACC,SAAD,EAAYC,KAAZ,MAAuB;AAChEC,IAAAA,KAAK,EAAEF,SAAS,CAACE,KAD+C;AAEhEC,IAAAA,WAAW,EAAEH,SAAS,CAACG,WAFyC;AAGhEC,IAAAA,IAAI,EAAEJ,SAAS,CAACI,IAHgD;AAIhEC,IAAAA,IAAI,EAAG,IAAGnB,kBAAkB,CAACc,SAAS,CAACE,KAAX,CAAkB,EAJkB;AAKhEI,IAAAA,mBAAmB,EAAEN,SAAS,CAACM,mBALiC;AAMhEC,IAAAA,SAAS,EAAEb,UAAU,CAAC,CAAE,OAAMO,KAAK,GAAG,CAAG,EAAnB,CAAD;AAN2C,GAAvB,CAApB,CAAvB;AASA,SAAO;AAACH,IAAAA;AAAD,GAAP;AACD,CApBM;;GAAMP,gB","sourcesContent":["import { lazy, useContext } from 'react';\nimport { metadata as appOneMetadata } from '@data-portal/app-one';\nimport { metadata as appTwoMetadata } from '@data-portal/app-two';\nimport { convertToKebabCase } from '../general/_general.util';\nimport { Context as AuthContext } from '../../context/AuthContext';\n\nconst GitHubFinder = lazy(() => import('@data-portal/app-one'));\nconst Counter = lazy(() => import('@data-portal/app-two'));\n\n\nexport const useGetDashboards = () => {\n  const {state} = useContext(AuthContext);\n  const listOfLibraries = [appOneMetadata, appTwoMetadata];\n\n  const DASHBOARDS = (name) => ({\n    APP_1: <GitHubFinder state={state}/>,\n    APP_2: <Counter state={state}/>\n  })[name]\n\n\n  const dashBoardsList = listOfLibraries.map((dashboard, index) => ({\n    title: dashboard.title,\n    description: dashboard.description,\n    icon: dashboard.icon,\n    slug: `/${convertToKebabCase(dashboard.title)}`,\n    requiredPermissions: dashboard.requiredPermissions,\n    component: DASHBOARDS([`APP_${index + 1 }`])\n  }));\n\n  return {dashBoardsList};\n};\n"]},"metadata":{},"sourceType":"module"}